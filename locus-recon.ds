/*
 * Author       : zoho_toshi12
 * Generated on : 21-Jan-2019 01:51:09 PST
 * Version      : 1.0
 */
 application "Locus Recon"
 {
 	date format = "dd-MMM-yyyy"
 	time zone = "Asia/Calcutta"
	section Plans
	{
		icon = "sport-tactic"
		form Plan
		{
			success message = "Plan Added Successfully"
			field alignment = left
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Team
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Date_field
			(
    			type = date
				displayname = "Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Plan_ID
			(
    			type = text
				displayname = "Plan ID"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Bill_Request_ID
			(
    			type = text
				displayname = "Bill Request ID"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Status
			(
				type = picklist
				values = {"Open", "Closed"}
				initial value = "Open"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Approval_Status
			(
				type = radiobuttons
				displayname = "Approval Status"
				values = {"Approve", "Reject"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			Submitted_for_Review
			(
    			type = checkbox
				displayname = "Submitted for Review"
				initial value = false
	 			row = 1
	 			column = 1   
				width = medium
			)
			Tours
			(
				type = grid
				displayname = "Tour(s)"
				values  = Tours.ID
    			bidirectional = Bill_Request
	 			row = 2
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "sport-tactic"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Tours
	{
		icon = "transportation-plane-18"
		form Tours
		{
			success message = "Tour Added Successfully"
			field alignment = left
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Bill_Request
			(
				type = picklist
				displayname = "Bill Request"
				values  = Plan.ID
    			bidirectional = Tours
    			displayformat = [Bill_Request_ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Client
			(
				type = picklist
				values  = Client_Data.ID
    			displayformat = [Client_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Transporter
			(
				type = picklist
				values  = Transporter_Data.ID
    			displayformat = [Transporter_ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Tour_ID
			(
    			type = text
				displayname = "Tour ID"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Tour_Distance
			(
				type = decimal
				displayname = "Tour Distance"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Vehicle_Number
			(
    			type = text
				displayname = "Vehicle Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Vehicle_Type
			(
    			type = text
				displayname = "Vehicle Type"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Planned_Tour_Cost
			(
				type = INR
				displayname = "Planned Tour Cost"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Tour_Visits
			(
				type = grid
				displayname = "Tour Visits"
				values  = Visits.ID
    			bidirectional = Tour_ID
	 			row = 2
	 			column = 1   
				width = medium
			)
			Section1
			(
				type = section
				displayname = "Section"
	 			row = 3
	 			column = 0   
				width = medium
			)
			Actual_Distance
			(
				type = decimal
				displayname = "Actual Distance (in km)"
	 			row = 3
	 			column = 1   
				width = medium
			)
			Actual_Cost
			(
				type = INR
				displayname = "Actual Cost"
	 			row = 3
	 			column = 1   
				width = medium
			)
			Invoice_Number
			(
    			type = text
				displayname = "Invoice Number"
	 			row = 3
	 			column = 1   
				width = medium
			)
			Invoice_Proof
			(
    			type = upload file
				displayname = "Invoice Proof"
				browse = local_drive
	 			row = 3
	 			column = 1   
				width = medium
			)
			Request_Status
			(
				type = radiobuttons
				displayname = "Request Status"
				values = {"Approve", "Reject"}
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have Tour_BR_Status
			(
				type = picklist
				displayname = "Tour BR Status"
				values = {"Open", "Pending Review", "Approved", "Reopen"}
	 			row = 3
	 			column = 1   
				width = medium
			)
			Transporter_Submit
			(
    			type = checkbox
				displayname = "Tour Update Complete"
				initial value = false
	 			row = 3
	 			column = 1   
				width = medium
			)
			Task_List
			(
    			type = textarea
				displayname = "Task List"
				height = 100px
	 			row = 3
	 			column = 1   
				width = medium
			)
			Reason_for_Rejection
			(
    			type = textarea
				displayname = "Rejection Comments"
				height = 100px
	 			row = 3
	 			column = 1   
				width = medium
			)
			Transporter_Comments
			(
    			type = textarea
				displayname = "Transporter Comments"
				height = 100px
	 			row = 3
	 			column = 1   
				width = medium
			)
			Comments_History
			(
    			type = textarea
				displayname = "Comments History"
				height = 100px
	 			row = 3
	 			column = 1   
				width = 999px
			)
	
			customize
			(
				icon = "transportation-plane-18"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Visits
	{
		icon = "transportation-plane-17"
		form Visits
		{
			success message = "Visit Added Successfully"
			field alignment = left
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Tour_ID
			(
				type = picklist
				displayname = "Tour ID"
				values  = Tours.ID
    			bidirectional = Tour_Visits
    			displayformat = [Tour_ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Visit_ID
			(
    			type = text
				displayname = "Visit ID"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Get_Visit_Data
			(
    			type = checkbox
				displayname = "Get Visit Data"
				initial value = false
	 			row = 1
	 			column = 1   
				width = medium
			)
			Customer_Name
			(
    			type = text
				displayname = "Customer Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Customer_Address
			(
    			type = textarea
				displayname = "Customer Address"
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Customer_Number
			(
    			type = text
				displayname = "Customer Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Vehicle_Number
			(
    			type = text
				displayname = "Vehicle Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Lorry_Receipt_Number
			(
    			type = text
				displayname = "Lorry Receipt Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Lorry_Receipt_Proof
			(
    			type = upload file
				displayname = "Lorry Receipt Proof"
				browse = local_drive
	 			row = 1
	 			column = 1   
				width = medium
			)
			POD_Number
			(
    			type = text
				displayname = "POD Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			POD_Proof
			(
    			type = upload file
				displayname = "POD Proof"
				browse = local_drive
	 			row = 1
	 			column = 1   
				width = medium
			)
			Delivery_Date
			(
    			type = date
				displayname = "Delivery Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "transportation-plane-17"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Start_a_New_Billing_Request
	{
		displayname= "Start a New Billing Request"
		icon = "shopping-cash-register"
		list Start_a_New_Billing_Request_Report
		{
			displayName = "Start a New Billing Request Report"
   			hide = true
			show all rows from Start_a_New_Billing_Request    
			(
				Date_field as "Date"
				Team
				Started_By as "Started By"
				Client_Data as "Client Data"
				Order_Set as "Order Set"
				Dump_Data as "Dump Data"
				Transporter
			)
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Date_field as "Date"
							Team
							Started_By as "Started By"
							Client_Data as "Client Data"
							Order_Set as "Order Set"
							Dump_Data as "Dump Data"
							Transporter
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Date_field as "Date"
							Team
							Started_By as "Started By"
							Client_Data as "Client Data"
							Order_Set as "Order Set"
							Dump_Data as "Dump Data"
							Transporter
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Client_Personnel
	{
		displayname= "Client Personnel"
		icon = "users-circle-10"
		form Client_Data
		{
			displayname = "Client Data"
			success message = "Client Personnel Added Successfully"
			field alignment = left
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Client_ID
			(
    			type = text
				displayname = "Client ID"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Personnel_ID
			(
    			type = text
				displayname = "Personnel ID"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Authtoken
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Client_Name
			(
    			type = text
				displayname = "Client Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			POC_List
			(
				type = grid
				displayname = "POC List"
				values  = Client_POC_List.ID
    			bidirectional = Client
	 			row = 2
	 			column = 1   
				width = medium
			)
			Teams
			(
				type = grid
				values  = Teams.ID
    			bidirectional = Client_Data
	 			row = 3
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "users-circle-10"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Client_POC_Lists
	{
		displayname= "Client POC Lists"
		icon = "ui-1-trash-simple"
		form Client_POC_List
		{
			displayname = "Client POC List"
			success message = "Client POC List Added Successfully"
			field alignment = left
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Client
			(
				type = picklist
				values  = Client_Data.ID
    			bidirectional = POC_List
    			displayformat = [Client_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Personnel_ID
			(
    			type = text
				displayname = "Personnel ID"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Name
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Role
			(
				type = picklist
				values = {"Admin", "Regular"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Email_ID
			(
    			type = email
				displayname = "Email ID"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Associated_Teams
			(
				type = list
				displayname = "Associated Teams"
				values  = Teams.ID
    			displayformat = [Team_Name]
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "design-bullet-list-67"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Teams
	{
		icon = "social-1-logo-slack"
		form Teams
		{
			success message = "Team Added Successfully"
			field alignment = left
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Client_Data
			(
				type = picklist
				displayname = "Client Data"
				values  = Client_Data.ID
    			bidirectional = Teams
    			displayformat = [Client_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Team_Name
			(
    			type = text
				displayname = "Team Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Team_ID
			(
    			type = text
				displayname = "Team ID"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "social-1-logo-slack"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Transporter_Data
	{
		displayname= "Transporter Data"
		icon = "ui-1-database"
		form Transporter_Data
		{
			displayname = "Transporter Data"
			success message = "Data Added Successfully!"
			field alignment = left
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Client_Data
			(
				type = picklist
				displayname = "Client Data"
				values  = Client_Data.ID
    			displayformat = [Client_ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Transporter_Name
			(
    			type = text
				displayname = "Transporter Name"
    			description
    			[
    				type = tooltip
    			 	message = "Name of the Transporter Organisation"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Transporter_ID
			(
    			type = text
				displayname = "Transporter ID"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have POC_List
			(
				type = grid
				displayname = "POC List"
				values  = Transporter_POC_List.ID
    			bidirectional = Transporter_ID
	 			row = 2
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-database"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Transporter_POC_List
	{
		displayname= "Transporter POC List"
		icon = "shopping-receipt-list-43"
		form Transporter_POC_List
		{
			displayname = "Transporter POC List"
			success message = "Data Added Successfully!"
			field alignment = left
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Transporter_ID
			(
				type = picklist
				displayname = "Transporter ID"
				values  = Transporter_Data.ID
    			bidirectional = POC_List
    			displayformat = [Transporter_ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Personnel_ID
			(
    			type = text
				displayname = "Personnel ID"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Name
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Email_ID
			(
    			type = email
				displayname = "Email ID"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Accessible_Teams
			(
				type = list
				displayname = "Accessible Teams"
				values  = Teams.ID
    			displayformat = [Team_Name]
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Permissions
			(
				type = picklist
				values = {"Read", "Write"}
				initial value = "Write"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Transporter_Personnel
			(
    			type = text
				displayname = "Transporter + Personnel"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-receipt-list-43"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section ID_Generators
	{
		displayname= "ID Generators"
		icon = "users-2-contacts-45"
		form ID_Generator
		{
			displayname = "ID Generator"
			success message = "ID Generator Added Successfully"
			field alignment = left
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Billing_Request_Note
			(
    			type = plaintext
				value = "<font color=\"#0000ff\" size=\"3\"><b><i>Billing Request</i></b></font>"
	 			row = 1
	 			column = 1   
				width = medium
			)
			BR_Prefix
			(
    			type = text
				displayname = "Prefix"
	 			row = 1
	 			column = 1   
				width = medium
			)
			BR_Next_ID
			(
				type = number
				displayname = "Next ID Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = "<b style=\"color: rgb(0, 0, 255); font-size: medium\"><i>Transporter</i></b>"
	 			row = 1
	 			column = 1   
				width = medium
			)
			TR_Prefix
			(
    			type = text
				displayname = "Prefix"
	 			row = 1
	 			column = 1   
				width = medium
			)
			TR_Next_ID
			(
				type = number
				displayname = "Next ID Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Creator_Authtoken
			(
    			type = text
				displayname = "Creator Authtoken"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "users-2-contacts-45"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		properties
		{
			total entries
			{
				allowed count = 1
			}
		}
		}
	}
	section Client_Personnel1
	{
		displayname= "Client Personnel"
		icon = "users-circle-10"
		list Review_Billing_Request_Report
		{
			displayName = "Review Billing Request Report"
   			hide = true
			show all rows from Review_Billing_Request    
			(
				Date_field as "Date"
				Team
				Triggered_By as "Triggered By"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Date_field as "Date"
							Team
							Triggered_By as "Triggered By"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Date_field as "Date"
							Team
							Triggered_By as "Triggered By"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Client_Profile
		{
			displayName = "Profile"
			show all rows from Client_Data  [ID == Client_POC_List[Email_ID == zoho.loginuserid].Client]  
			(
				Client_Name as "Client Name"
				Personnel_ID as "Personnel ID"
			)
			options
			(
				icon = "users-circle-10"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Client_Name as "Client Name"
							Personnel_ID as "Personnel ID"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Profile"
						fields
						(
							Client_Name as "Client Name"
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "POC List"
		     			related field =  POC_List[ID == Client_POC_List[Email_ID == zoho.loginuserid].Client]
						fields
						(
							Personnel_ID as "Personnel ID"
							Name
							Role
							Email_ID as "Email ID"
							Associated_Teams as "Associated Teams"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Client_POCs
		{
			displayName = "All POCs"
			show all rows from Client_POC_List  [Client.ID == Client_POC_List[Email_ID == zoho.loginuserid].Client]  
			(
				Name
				Role
				Email_ID as "Email ID"
				Associated_Teams as "Associated Teams"
				Personnel_ID as "Personnel ID"
				Client
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Name
							Role
							Email_ID as "Email ID"
							Associated_Teams as "Associated Teams"
							Personnel_ID as "Personnel ID"
							Client
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Name
							Role
							Email_ID as "Email ID"
							Associated_Teams as "Associated Teams"
							Personnel_ID as "Personnel ID"
							Client
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Client_Transporter_POCs
		{
			displayName = "Transporter POCs"
			show all rows from Transporter_POC_List  [Transporter_ID.Client_Data == Client_POC_List[Email_ID == zoho.loginuserid].Client]  
			(
				Personnel_ID as "Personnel ID"
				Name
				Email_ID as "Email ID"
				Accessible_Teams as "Accessible Teams"
				Permissions
				Transporter_ID as "Transporter ID"
				Transporter_Personnel as "Transporter + Personnel"
			)
			options
			(
				icon = "users-multiple-19"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Personnel_ID as "Personnel ID"
							Name
							Email_ID as "Email ID"
							Accessible_Teams as "Accessible Teams"
							Permissions
							Transporter_ID as "Transporter ID"
							Transporter_Personnel as "Transporter + Personnel"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Personnel_ID as "Personnel ID"
							Name
							Email_ID as "Email ID"
							Accessible_Teams as "Accessible Teams"
							Permissions
							Transporter_ID as "Transporter ID"
							Transporter_Personnel as "Transporter + Personnel"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Client_Transporters
		{
			displayName = "All Transporters"
			show all rows from Transporter_Data  [Client_Data.ID == Client_POC_List[Email_ID == zoho.loginuserid].Client]  
			(
				Transporter_ID as "Transporter ID"
				Client_Data as "Client Data"
				Transporter_Name as "Transporter Name"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Transporter_ID as "Transporter ID"
							Client_Data as "Client Data"
							Transporter_Name as "Transporter Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Transporter_ID as "Transporter ID"
							Client_Data as "Client Data"
							Transporter_Name as "Transporter Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Recon
	{
		icon = "sport-fencing"
		form Review_Billing_Request
		{
			displayname = "Review Billing Request"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Triggered_By
			(
    			type = email
				displayname = "Triggered By"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Date_field
			(
    			type = date
				displayname = "Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Team
			(
				type = picklist
				values = {"Choice 1"}
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-receipt-list-42"
			)
			actions
			{
				on add
				{
					Review_Billing_Request
					(
   						type = submit
   						displayname = "Review Billing Request"
					)
					Cancel
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Open_Billing_Requests
		{
			displayName = "Open Billing Requests"
			show all rows from Plan  [Status == "Open" && Submitted_for_Review == true]  
			(
				Team
				Date_field as "Date"
				Plan_ID as "Plan ID"
				Bill_Request_ID as "Bill Request ID"
				Status
			)
			options
			(
				icon = "shopping-cash-register"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Team
							Date_field as "Date"
							Bill_Request_ID as "Bill Request ID"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock3
					(
			 			layout type = -2
		     			title = "Bill Request"
						fields
						(
							Team
							Date_field as "Date"
							Bill_Request_ID as "Bill Request ID"
							Plan_ID as "Plan ID"
							Status
						)
					)
					datablock4
					(
			 			layout type = -1
		     			title = "Tour(s)"
		     			related field =  Tours[Status == "Open" && Submitted_for_Review == true]
						fields
						(
							Transporter
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Tour_Distance as "Planned Distance"
							Actual_Distance as "Actual Distance (in km)"
							Planned_Tour_Cost as "Planned Cost"
							Actual_Cost as "Actual Cost"
							Invoice_Proof as "Invoice Proof"
							Tour_BR_Status as "Tour Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Closed_Billing_Requests
		{
			displayName = "Closed Billing Requests"
			show all rows from Plan  [Status == "Closed" && Submitted_for_Review == true]  
			(
				Team
				Date_field as "Date"
				Plan_ID as "Plan ID"
				Bill_Request_ID as "Bill Request ID"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Team
							Date_field as "Date"
							Bill_Request_ID as "Bill Request ID"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock3
					(
			 			layout type = -2
		     			title = "Bill Request"
						fields
						(
							Team
							Date_field as "Date"
							Bill_Request_ID as "Bill Request ID"
							Plan_ID as "Plan ID"
						)
					)
					datablock4
					(
			 			layout type = -1
		     			title = "Tour(s)"
		     			related field =  Tours[Status == "Closed" && Submitted_for_Review == true]
						fields
						(
							Transporter
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Tour_Distance as "Planned Distance"
							Actual_Distance as "Actual Distance (in km)"
							Planned_Tour_Cost as "Planned Cost"
							Actual_Cost as "Actual Cost"
							Invoice_Proof as "Invoice Proof"
							Tour_BR_Status as "Tour Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Plans
		{
			displayName = "All Billing Requests"
			show all rows from Plan  [Submitted_for_Review == true]  
			(
				Bill_Request_ID as "Bill Request ID"
				Status
				Date_field as "Date"
				Team
				Plan_ID as "Plan ID"
			)
			options
			(
				icon = "sport-tactic"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Bill_Request_ID as "Bill Request ID"
							Date_field as "Date"
							Team
							Status
							Plan_ID as "Plan ID"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Bill_Request_ID as "Bill Request ID"
							Date_field as "Date"
							Team
							Plan_ID as "Plan ID"
							Status
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "Tour(s)"
		     			related field =  Tours[Submitted_for_Review == true]
						fields
						(
							Transporter
							Tour_ID as "Tour ID"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Tour_Distance as "Planned Distance"
							Actual_Distance as "Actual Distance (in km)"
							Planned_Tour_Cost as "Planned Cost"
							Actual_Cost as "Actual Cost"
							Invoice_Proof as "Invoice Proof"
							Tour_BR_Status as "Status"
							Comments_History as "Comments History"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Pending_Verification
		{
			displayName = "Tours - Pending Review"
			show all rows from Tours  [Tour_BR_Status == "Pending Review" && Transporter_Submit == true]  
			(
				Tour_ID as "Tour ID"
				(
					width = 365px
				)
				Vehicle_Number as "Vehicle Number"
				(
					width = 136px
				)
				Vehicle_Type as "Vehicle Type"
				(
					width = 127px
				)
				Planned_Tour_Cost as "Planned Cost"
				(
					width = 165px
				)
				Actual_Distance as "Actual Distance (in km)"
				(
					width = 190px
				)
				Actual_Cost as "Actual Cost"
				(
					width = 116px
				)
				custom action "Review"
				(
	  			workflow = Review_Tour
				show action in edit record menu = true
				column header = "Review"
				condition = (Tour_BR_Status == "Pending Review")
				)
				Bill_Request as "Bill Request"
				(
					width = 120px
				)
				Tour_Distance as "Planned Distance (in km)"
				(
					width = 132px
				)
				Invoice_Proof as "Invoice Proof"
			)
			options
			(
				icon = "loader-dots-06"
	 		)
			conditional formatting
			(
				"Cost Validation Negative"
				{
				condition = (Actual_Cost > input.Planned_Tour_Cost)
				fields = [Tour_ID]
				format = "color:#ffffff;background-color:#f27d7d;"
				}
				"Cost Validation Positive"
				{
				condition = (Actual_Cost <= input.Planned_Tour_Cost)
				fields = [Tour_ID]
				format = "color:#ffffff;background-color:#b6deb5;"
				}
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
				"Review"
							Tour_ID as "Tour ID"
							Tour_Distance as "Planned Distance (in km)"
							Actual_Distance as "Actual Distance (in km)"
							Planned_Tour_Cost as "Planned Cost"
							Actual_Cost as "Actual Cost"
							Vehicle_Type as "Vehicle Type"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Tour"
						fields
						(
							Bill_Request as "Bill Request"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Tour_Distance as "Planned Distance (in km)"
							Actual_Distance as "Actual Distance (in km)"
							Planned_Tour_Cost as "Planned Cost"
							Actual_Cost as "Actual Cost"
							Invoice_Proof as "Invoice Proof"
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "Tour Visits"
		     			related field =  Tour_Visits[Tour_BR_Status == "Pending Review" && Transporter_Submit == true]
						fields
						(
							Visit_ID as "Visit ID"
							Customer_Name as "Customer Name"
							Customer_Address as "Customer Address"
							Lorry_Receipt_Proof as "Lorry Receipt Proof"
							POD_Proof as "POD Proof"
							Delivery_Date as "Delivery Date"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Tours_Reopened
		{
			displayName = "Tours - Reopened"
			show all rows from Tours  [Tour_BR_Status == "Reopen" && Transporter_Submit == false]  
			(
				Invoice_Number as "Invoice Number"
				Request_Status as "Request Status"
				Tour_BR_Status as "Tour BR Status"
				Transporter_Submit as "Tour Update Complete"
				Reason_for_Rejection as "Rejection Comments"
				Task_List as "Task List"
				Planned_Tour_Cost as "Planned Tour Cost"
				Actual_Distance as "Actual Distance (in km)"
				Actual_Cost as "Actual Cost"
				Client
				Vehicle_Type as "Vehicle Type"
				Vehicle_Number as "Vehicle Number"
				Tour_Distance as "Planned Distance"
				Transporter
				Bill_Request as "Bill Request"
				Tour_ID as "Tour ID"
				Tour_Visits.Tour_ID as "Tour Visits"
				Invoice_Proof as "Invoice Proof"
			)
			options
			(
				icon = "arrows-1-back-80"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Bill_Request as "Bill Request"
							Transporter
							Tour_Distance as "Planned Distance"
							Actual_Distance as "Actual Distance (in km)"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Cost as "Actual Cost"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock3
					(
			 			layout type = -2
		     			title = "Tour"
						fields
						(
							Bill_Request as "Bill Request"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Tour_Distance as "Planned Distance"
							Actual_Distance as "Actual Distance (in km)"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Cost as "Actual Cost"
							Invoice_Proof as "Invoice Proof"
						)
					)
					datablock4
					(
			 			layout type = -1
		     			title = "Tour Visits"
		     			related field =  Tour_Visits[Tour_BR_Status == "Reopen" && Transporter_Submit == false]
						fields
						(
							Visit_ID as "Visit ID"
							Customer_Name as "Customer Name"
							Customer_Address as "Customer Address"
							Lorry_Receipt_Proof as "Lorry Receipt Proof"
							POD_Proof as "POD Proof"
							Delivery_Date as "Delivery Date"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Tours_Approved
		{
			displayName = "Tours - Approved"
			show all rows from Tours  [Tour_BR_Status == "Approved" && Transporter_Submit == true]  
			(
				Invoice_Number as "Invoice Number"
				Request_Status as "Request Status"
				Tour_BR_Status as "Tour BR Status"
				Transporter_Submit as "Tour Update Complete"
				Reason_for_Rejection as "Rejection Comments"
				Task_List as "Task List"
				Planned_Tour_Cost as "Planned Tour Cost"
				Actual_Distance as "Actual Distance (in km)"
				Actual_Cost as "Actual Cost"
				Client
				Vehicle_Type as "Vehicle Type"
				Vehicle_Number as "Vehicle Number"
				Tour_Distance as "Planned Distance"
				Transporter
				Bill_Request as "Bill Request"
				Tour_Visits.Tour_ID as "Tour Visits"
				Tour_ID as "Tour ID"
				Invoice_Proof as "Invoice Proof"
			)
			options
			(
				icon = "files-check"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Bill_Request as "Bill Request"
							Transporter
							Tour_Distance as "Planned Distance"
							Actual_Distance as "Actual Distance (in km)"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Cost as "Actual Cost"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock3
					(
			 			layout type = -2
		     			title = "Tour"
						fields
						(
							Tour_ID as "Tour ID"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Tour_Distance as "Planned Distance"
							Actual_Distance as "Actual Distance (in km)"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Cost as "Actual Cost"
							Invoice_Proof as "Invoice Proof"
						)
					)
					datablock4
					(
			 			layout type = -1
		     			title = "Tour Visits"
		     			related field =  Tour_Visits[Tour_BR_Status == "Approved" && Transporter_Submit == true]
						fields
						(
							Visit_ID as "Visit ID"
							Customer_Name as "Customer Name"
							Customer_Address as "Customer Address"
							Lorry_Receipt_Proof as "Lorry Receipt Proof"
							POD_Proof as "POD Proof"
							Delivery_Date as "Delivery Date"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Tours
		{
			displayName = "All Submitted Tours"
			show all rows from Tours  [Transporter_Submit == true]  
			(
				Tour_ID as "Tour ID"
				Tour_Distance as "Planned Distance"
				Vehicle_Number as "Vehicle Number"
				Vehicle_Type as "Vehicle Type"
				Planned_Tour_Cost as "Planned Tour Cost"
				Actual_Distance as "Actual Distance (in km)"
				Actual_Cost as "Actual Cost"
				Transporter
				Invoice_Proof as "Invoice Proof"
				Bill_Request as "Bill Request"
			)
			options
			(
				icon = "travel-world"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Bill_Request as "Bill Request"
							Tour_ID as "Tour ID"
							Vehicle_Type as "Vehicle Type"
							Tour_Distance as "Planned Distance"
							Actual_Distance as "Actual Distance (in km)"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Cost as "Actual Cost"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Tour Overview"
						fields
						(
							Tour_ID as "Tour ID"
							Transporter
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Tour_Distance as "Planned Distance"
							Actual_Distance as "Actual Distance (in km)"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Cost as "Actual Cost"
							Invoice_Proof as "Invoice Proof"
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "Tour Visits"
		     			related field =  Tour_Visits[Transporter_Submit == true]
						fields
						(
							Visit_ID as "Visit ID"
							Customer_Name as "Customer Name"
							Customer_Address as "Customer Address"
							Lorry_Receipt_Proof as "Lorry Receipt Proof"
							POD_Proof as "POD Proof"
							Delivery_Date as "Delivery Date"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Configurations
	{
		icon = "tech-sync"
		form Notification_Setup
		{
			displayname = "Notification Setup"
			success message = "Notification Setup Added Successfully"
			field alignment = left
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Sender_field
			(
				type = picklist
				displayname = "Sender"
				values = {"Client", "Transporter"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			Scenario
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = "Use the following mapping in your Email content to make it dynamic.<div><br /></div><div>&lt;BR_No&gt; - Billing Request Number</div><div>&lt;Transporter_ID&gt; - Transporter_ID</div><div>&lt;Transporter&gt; - Transporter Name</div><div>&lt;Tour_ID&gt; - Tour ID</div><div>&lt;Client_ID&gt; - Client ID in locus</div><div>&lt;Client&gt; - Client Name</div><div>&lt;content_start&gt; - Denotes the start of the content part</div><div>&lt;content_end&gt; - Denotes the end of the content part</div><div>&lt;TOC&gt; - Denotes the table data that has to be added</div>"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Subject_field
			(
    			type = text
				displayname = "Subject"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Body
			(
    			type = richtext
				height = 200px
				toolbar = enable
				[
					style, font-color, background-color, alignment, link, table, bullets-and-numbering, 
					font-size : {1, 2, 3, 4, 5, 6, 7},
					font-family : {"Serif", "Arial", "Courier New", "Georgia", "Tahoma", "Times New Roman", "Trebuchet", "Verdana", "Comic Sans Ms"}
				]
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "tech-2-p-system-update"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list All_ID_Generators
		{
			displayName = "All ID Generators"
			show all rows from ID_Generator    
			(
				BR_Prefix as "Prefix"
				BR_Next_ID as "Next ID Number"
				TR_Prefix as "Prefix"
				TR_Next_ID as "Next ID Number"
				Creator_Authtoken as "Creator Authtoken"
			)
			options
			(
				icon = "nature-collar"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							BR_Prefix as "Prefix"
							BR_Next_ID as "Next ID Number"
							TR_Prefix as "Prefix"
							TR_Next_ID as "Next ID Number"
							Creator_Authtoken as "Creator Authtoken"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							BR_Prefix as "Prefix"
							BR_Next_ID as "Next ID Number"
							TR_Prefix as "Prefix"
							TR_Next_ID as "Next ID Number"
							Creator_Authtoken as "Creator Authtoken"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Notification_Setups
		{
			displayName = "All Notification Setups"
			show all rows from Notification_Setup    
			(
				Subject_field as "Subject"
				Body
				Sender_field as "Sender"
				Scenario
			)
			options
			(
				icon = "tech-sync"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Subject_field as "Subject"
							Body
							Sender_field as "Sender"
							Scenario
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Subject_field as "Subject"
							Body
							Sender_field as "Sender"
							Scenario
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Transporter_Personnel
	{
		displayname= "Transporter Personnel"
		list All_Transporter_Tours
		{
			displayName = "All Transporter Tours"
   			hide = true
			show all rows from Tours  [Transporter.ID == Transporter_POC_List[Email_ID == zoho.loginuserid].Transporter_ID]  
			(
				Tour_ID as "Tour ID"
				Tour_Distance as "Tour Distance"
				Vehicle_Number as "Vehicle Number"
				Vehicle_Type as "Vehicle Type"
				Planned_Tour_Cost as "Planned Tour Cost"
				Actual_Distance as "Actual Distance (in km)"
				Actual_Cost as "Actual Cost"
				Invoice_Number as "Invoice Number"
				Invoice_Proof as "Invoice Proof"
				Bill_Request as "Bill Request"
				Transporter
				Tour_BR_Status as "Tour BR Status"
				Transporter_Submit as "Tour Update Complete"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Tour_ID as "Tour ID"
							Tour_Distance as "Tour Distance"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Distance as "Actual Distance (in km)"
							Actual_Cost as "Actual Cost"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Tour_ID as "Tour ID"
							Tour_Distance as "Tour Distance"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Distance as "Actual Distance (in km)"
							Actual_Cost as "Actual Cost"
							Invoice_Number as "Invoice Number"
							Invoice_Proof as "Invoice Proof"
							Bill_Request as "Bill Request"
							Transporter
							Tour_BR_Status as "Tour BR Status"
							Transporter_Submit as "Tour Update Complete"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Profile
		{
			displayName = "Profile"
			show all rows from Transporter_Data  [ID == Transporter_POC_List[Email_ID == zoho.loginuserid].Transporter_ID]  
			(
				Transporter_ID as "Transporter ID"
				Transporter_Name as "Transporter Name"
			)
			options
			(
				icon = "location-explore-user"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Transporter_ID as "Transporter ID"
							Transporter_Name as "Transporter Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Transporter"
						fields
						(
							Transporter_ID as "Transporter ID"
							Transporter_Name as "Transporter Name"
						)
					)
					datablock3
					(
			 			layout type = -1
		     			title = "Personnel Data"
		     			related field =  POC_List[ID == Transporter_POC_List[Email_ID == zoho.loginuserid].Transporter_ID]
						fields
						(
							Personnel_ID as "Personnel ID"
							Name
							Email_ID as "Email ID"
							Accessible_Teams as "Accessible Teams"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Peers_T_POC
		{
			displayName = "Peers"
			show all rows from Transporter_POC_List  [Transporter_ID.ID == Transporter_POC_List[Email_ID == zoho.loginuserid].Transporter_ID]  
			(
				Personnel_ID as "Personnel ID"
				Name
				Email_ID as "Email ID"
				Transporter_ID as "Transporter ID"
			)
			options
			(
				icon = "users-multiple-19"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Transporter_ID as "Transporter ID"
							Personnel_ID as "Personnel ID"
							Name
							Email_ID as "Email ID"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Personnel_ID as "Personnel ID"
							Name
							Email_ID as "Email ID"
							Transporter_ID as "Transporter ID"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Copy_of_Invalid_Access
	{
		displayname= "Copy of Invalid Access"
		form Unauthorised_Access
		{
			displayname = "Unauthorised Access"
			store data in zc = false
			success message = ""
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = "<font color=\"#ff3333\" size=\"4\"><b>You are not authorised to access this feature. Contact Administrator.</b></font>"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
		}
	}
	section Notification_Centre
	{
		displayname= "Notification Centre"
		icon = "tech-2-l-security"
		form Notification_Centre
		{
			displayname = "Notification Centre"
			success message = "Data Added Successfully!"
			field alignment = left
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			From
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = medium
			)
			To
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Message
			(
    			type = richtext
				height = 200px
				toolbar = enable
				[
					style, font-color, background-color, alignment, link, table, bullets-and-numbering, 
					font-size : {1, 2, 3, 4, 5, 6, 7},
					font-family : {"Serif", "Arial", "Courier New", "Georgia", "Tahoma", "Times New Roman", "Trebuchet", "Verdana", "Comic Sans Ms"}
				]
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "tech-2-l-security"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Notification_Centre_Report
		{
			displayName = "Notification Centre Report"
   			hide = true
			show all rows from Notification_Centre    
			(
				From
				To
				Message
			)
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							From
							To
							Message
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							From
							To
							Message
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Dumps
	{
		icon = "education-backpack-58"
		form Dump_Form
		{
			displayname = "Dump Form"
			success message = "Dump Added Successfully"
			field alignment = left
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			taskList
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			planData
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			API_Triggered
			(
    			type = checkbox
				displayname = "API Triggered"
				initial value = false
	 			row = 1
	 			column = 1   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = "Add your Note here ..."
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "design-2-bucket"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list All_Dumps
		{
			displayName = "All Dumps"
   			hide = true
			show all rows from Dump_Form    
			(
				taskList
				planData
				API_Triggered as "API Triggered"
			)
			options
			(
				icon = "envir-waste"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							taskList
							planData
							API_Triggered as "API Triggered"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							taskList
							planData
							API_Triggered as "API Triggered"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Recon1
	{
		displayname= "Recon"
		icon = "business-goal-64"
		form Start_a_New_Billing_Request
		{
			displayname = "Start a New Billing Request"
			success message = "Data Added Successfully!"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Client_Data
			(
				type = picklist
				displayname = "Client Data"
				values  = Client_Data.ID
    			displayformat = [Client_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Transporter
			(
				type = picklist
				values  = Transporter_Data.ID
    			displayformat = [Transporter_ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Started_By
			(
    			type = email
				displayname = "Started By"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Date_field
			(
    			type = date
				displayname = "Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Team
			(
				type = picklist
				values = {"Choice 1"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Order_Set
			(
				type = picklist
				displayname = "Order Set"
				values = {"Choice 1"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			Dump_Data
			(
    			type = textarea
				displayname = "Dump Data"
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-cash-register"
			)
			actions
			{
				on add
				{
					Start_Billing_Request
					(
   						type = submit
   						displayname = "Start Billing Request"
					)
					Cancel
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Pending_Updation
		{
			displayName = "Tours - Pending Updation"
			show all rows from Tours  [Transporter.ID == Transporter_POC_List[Email_ID == zoho.loginuserid].Transporter_ID && Transporter_Submit == false && Tour_BR_Status == "Open"]  
			(
				Tour_ID as "Tour ID"
				Tour_Distance as "Tour Distance"
				Vehicle_Number as "Vehicle Number"
				Vehicle_Type as "Vehicle Type"
				Planned_Tour_Cost as "Planned Tour Cost"
				Actual_Distance as "Actual Distance (in km)"
				Actual_Cost as "Actual Cost"
				Invoice_Number as "Invoice Number"
				Invoice_Proof as "Invoice Proof"
				Bill_Request as "Bill Request"
				Transporter
				Tour_BR_Status as "Tour BR Status"
				Transporter_Submit as "Tour Update Complete"
				custom action "Update"
				(
	  			workflow = Transporter_Update_Tour
				show action in edit record menu = true
				column header = "Update"
				condition = (Tour_BR_Status == "Open")
				)
			)
			options
			(
				icon = "shopping-chart"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
				"Update"
							Tour_ID as "Tour ID"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Actual_Distance as "Actual Distance (in km)"
							Actual_Cost as "Actual Cost"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Tour_ID as "Tour ID"
							Tour_Distance as "Tour Distance"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Distance as "Actual Distance (in km)"
							Actual_Cost as "Actual Cost"
							Invoice_Number as "Invoice Number"
							Invoice_Proof as "Invoice Proof"
							Bill_Request as "Bill Request"
							Transporter
							Tour_BR_Status as "Tour BR Status"
							Transporter_Submit as "Tour Update Complete"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Tours_Re_Opened
		{
			displayName = "Tours - Re Opened"
			show all rows from Tours  [Transporter.ID == Transporter_POC_List[Email_ID == zoho.loginuserid].Transporter_ID && Transporter_Submit == false && Tour_BR_Status == "Reopen"]  
			(
				Tour_ID as "Tour ID"
				Tour_Distance as "Tour Distance"
				Vehicle_Number as "Vehicle Number"
				Vehicle_Type as "Vehicle Type"
				Planned_Tour_Cost as "Planned Tour Cost"
				Actual_Distance as "Actual Distance (in km)"
				Actual_Cost as "Actual Cost"
				Invoice_Number as "Invoice Number"
				Invoice_Proof as "Invoice Proof"
				Bill_Request as "Bill Request"
				Transporter
				Tour_BR_Status as "Tour BR Status"
				Transporter_Submit as "Tour Update Complete"
				custom action "Update"
				(
	  			workflow = Transporter_Update_Tour
				show action in edit record menu = true
				column header = "Update"
				condition = (Tour_BR_Status == "Reopen")
				)
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
				"Update"
							Tour_ID as "Tour ID"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Actual_Distance as "Actual Distance (in km)"
							Actual_Cost as "Actual Cost"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Tour_ID as "Tour ID"
							Tour_Distance as "Tour Distance"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Distance as "Actual Distance (in km)"
							Actual_Cost as "Actual Cost"
							Invoice_Number as "Invoice Number"
							Invoice_Proof as "Invoice Proof"
							Bill_Request as "Bill Request"
							Transporter
							Tour_BR_Status as "Tour BR Status"
							Transporter_Submit as "Tour Update Complete"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Tours_Approved1
		{
			displayName = "Tours - Approved"
			show all rows from Tours  [Transporter.ID == Transporter_POC_List[Email_ID == zoho.loginuserid].Transporter_ID && Transporter_Submit == true && Tour_BR_Status == "Approved"]  
			(
				Tour_ID as "Tour ID"
				Tour_Distance as "Tour Distance"
				Vehicle_Number as "Vehicle Number"
				Vehicle_Type as "Vehicle Type"
				Planned_Tour_Cost as "Planned Tour Cost"
				Actual_Distance as "Actual Distance (in km)"
				Actual_Cost as "Actual Cost"
				Invoice_Number as "Invoice Number"
				Invoice_Proof as "Invoice Proof"
				Bill_Request as "Bill Request"
				Transporter
				Tour_BR_Status as "Tour BR Status"
				Transporter_Submit as "Tour Update Complete"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Tour_ID as "Tour ID"
							Tour_Distance as "Tour Distance"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Distance as "Actual Distance (in km)"
							Actual_Cost as "Actual Cost"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Tour_ID as "Tour ID"
							Tour_Distance as "Tour Distance"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Distance as "Actual Distance (in km)"
							Actual_Cost as "Actual Cost"
							Invoice_Number as "Invoice Number"
							Invoice_Proof as "Invoice Proof"
							Bill_Request as "Bill Request"
							Transporter
							Tour_BR_Status as "Tour BR Status"
							Transporter_Submit as "Tour Update Complete"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Locus_Personnel
	{
		displayname= "Locus Personnel"
		list All_Clients
		{
			displayName = "All Clients"
			show all rows from Client_Data    
			(
				Client_ID as "Client ID"
				Personnel_ID as "Client Personnel ID"
				Authtoken
				Client_Name as "Client Name"
			)
			options
			(
				icon = "users-multiple-19"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Client_ID as "Client ID"
							Personnel_ID as "Client Personnel ID"
							Client_Name as "Client Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Client Overview"
						fields
						(
							Client_ID as "Client ID"
							Client_Name as "Client Name"
							Personnel_ID as "Client Personnel ID"
							Authtoken
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "POC List"
		     			related field =  POC_List
						fields
						(
							Personnel_ID as "Personnel ID"
							Name
							Role
							Email_ID as "Email ID"
							Associated_Teams as "Associated Teams"
						)
					)
					datablock3
					(
			 			layout type = -1
		     			title = "All Client Teams"
		     			related field =  Teams
						fields
						(
							Team_Name as "Team Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Teams
		{
			displayName = "All Teams"
			show all rows from Teams    
			(
				Team_Name as "Team Name"
				Team_ID as "Team ID"
				Client_Data as "Client Data"
			)
			options
			(
				icon = "social-1-logo-slack"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Team_Name as "Team Name"
							Team_ID as "Team ID"
							Client_Data as "Client Data"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Team_Name as "Team Name"
							Team_ID as "Team ID"
							Client_Data as "Client Data"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_POCs
		{
			displayName = "All Client POCs"
			show all rows from Client_POC_List    
			(
				Name
				Role
				Email_ID as "Email ID"
				Associated_Teams as "Associated Teams"
				Personnel_ID as "Personnel ID"
				Client
			)
			options
			(
				icon = "users-2-b-security"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Name
							Role
							Email_ID as "Email ID"
							Associated_Teams as "Associated Teams"
							Personnel_ID as "Personnel ID"
							Client
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Name
							Role
							Email_ID as "Email ID"
							Associated_Teams as "Associated Teams"
							Personnel_ID as "Personnel ID"
							Client
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Transporters
		{
			displayName = "All Client Transporters"
			show all rows from Transporter_Data    
			(
				Transporter_ID as "Transporter ID"
				Client_Data as "Client Data"
				Transporter_Name as "Transporter Name"
			)
			options
			(
				icon = "shopping-delivery-fast"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Transporter_ID as "Transporter ID"
							Client_Data as "Client Data"
							Transporter_Name as "Transporter Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Transporter_ID as "Transporter ID"
							Client_Data as "Client Data"
							Transporter_Name as "Transporter Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Transporter_POCs
		{
			displayName = "All Transporter POCs"
			show all rows from Transporter_POC_List    
			(
				Personnel_ID as "Personnel ID"
				Name
				Email_ID as "Email ID"
				Accessible_Teams as "Accessible Teams"
				Permissions
				Transporter_ID as "Transporter ID"
				Transporter_Personnel as "Transporter + Personnel"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Personnel_ID as "Personnel ID"
							Name
							Email_ID as "Email ID"
							Accessible_Teams as "Accessible Teams"
							Permissions
							Transporter_ID as "Transporter ID"
							Transporter_Personnel as "Transporter + Personnel"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Personnel_ID as "Personnel ID"
							Name
							Email_ID as "Email ID"
							Accessible_Teams as "Accessible Teams"
							Permissions
							Transporter_ID as "Transporter ID"
							Transporter_Personnel as "Transporter + Personnel"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Locus_Recon
	{
		displayname= "Locus Recon"
		list All_Visits1
		{
			displayName = "All Visits"
   			hide = true
			show all rows from Visits  [Tour_ID.Client == Client_POC_List[Email_ID == zoho.loginuserid].Client]  
			(
				Visit_ID as "Visit ID"
				Customer_Name as "Customer Name"
				Customer_Address as "Customer Address"
				Vehicle_Number as "Vehicle Number"
				Lorry_Receipt_Number as "Lorry Receipt Number"
				Lorry_Receipt_Proof as "Lorry Receipt Proof"
				POD_Number as "POD Number"
				POD_Proof as "POD Proof"
				Delivery_Date as "Delivery Date"
				Tour_ID as "Tour ID"
				Customer_Number as "Customer Number"
				Get_Visit_Data as "Get Visit Data"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Visit_ID as "Visit ID"
							Customer_Name as "Customer Name"
							Customer_Address as "Customer Address"
							Vehicle_Number as "Vehicle Number"
							Lorry_Receipt_Number as "Lorry Receipt Number"
							Lorry_Receipt_Proof as "Lorry Receipt Proof"
							POD_Number as "POD Number"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Visit_ID as "Visit ID"
							Customer_Name as "Customer Name"
							Customer_Address as "Customer Address"
							Vehicle_Number as "Vehicle Number"
							Lorry_Receipt_Number as "Lorry Receipt Number"
							Lorry_Receipt_Proof as "Lorry Receipt Proof"
							POD_Number as "POD Number"
							POD_Proof as "POD Proof"
							Delivery_Date as "Delivery Date"
							Tour_ID as "Tour ID"
							Customer_Number as "Customer Number"
							Get_Visit_Data as "Get Visit Data"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Billing_Requests_Locus
		{
			displayName = "Billing Requests - Locus"
			show all rows from Plan    
			(
				Team
				Date_field as "Date"
				Plan_ID as "Plan ID"
				Bill_Request_ID as "Bill Request ID"
				Status
				Approval_Status as "Approval Status"
				Submitted_for_Review as "Submitted for Review"
			)
			options
			(
				icon = "shopping-award"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Team
							Date_field as "Date"
							Plan_ID as "Plan ID"
							Bill_Request_ID as "Bill Request ID"
							Status
							Approval_Status as "Approval Status"
							Submitted_for_Review as "Submitted for Review"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Team
							Date_field as "Date"
							Plan_ID as "Plan ID"
							Bill_Request_ID as "Bill Request ID"
							Status
							Approval_Status as "Approval Status"
							Submitted_for_Review as "Submitted for Review"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Tours_Locus
		{
			displayName = "Tours - Locus"
			show all rows from Tours    
			(
				Bill_Request as "Bill Request"
				Client
				Transporter
				Tour_ID as "Tour ID"
				Tour_Distance as "Tour Distance"
				Vehicle_Number as "Vehicle Number"
				Vehicle_Type as "Vehicle Type"
				Planned_Tour_Cost as "Planned Tour Cost"
				Actual_Distance as "Actual Distance (in km)"
				Actual_Cost as "Actual Cost"
				Invoice_Number as "Invoice Number"
				Invoice_Proof as "Invoice Proof"
				Request_Status as "Request Status"
				Tour_BR_Status as "Tour BR Status"
				Transporter_Submit as "Tour Update Complete"
				Task_List as "Task List"
				Reason_for_Rejection as "Rejection Comments"
			)
			options
			(
				icon = "design-bullet-list-67"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Bill_Request as "Bill Request"
							Client
							Transporter
							Tour_ID as "Tour ID"
							Tour_Distance as "Tour Distance"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Bill_Request as "Bill Request"
							Client
							Transporter
							Tour_ID as "Tour ID"
							Tour_Distance as "Tour Distance"
							Vehicle_Number as "Vehicle Number"
							Vehicle_Type as "Vehicle Type"
							Planned_Tour_Cost as "Planned Tour Cost"
							Actual_Distance as "Actual Distance (in km)"
							Actual_Cost as "Actual Cost"
							Invoice_Number as "Invoice Number"
							Invoice_Proof as "Invoice Proof"
							Request_Status as "Request Status"
							Tour_BR_Status as "Tour BR Status"
							Transporter_Submit as "Tour Update Complete"
							Task_List as "Task List"
							Reason_for_Rejection as "Rejection Comments"
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "Tour Visits"
		     			related field =  Tour_Visits
						fields
						(
							Visit_ID as "Visit ID"
							Customer_Name as "Customer Name"
							Customer_Address as "Customer Address"
							Customer_Number as "Customer Number"
							Lorry_Receipt_Proof as "Lorry Receipt Proof"
							POD_Proof as "POD Proof"
							Delivery_Date as "Delivery Date"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Visits
		{
			displayName = "Visits - Locus"
			show all rows from Visits    
			(
				Visit_ID as "Visit ID"
				Customer_Name as "Customer Name"
				Customer_Address as "Customer Address"
				Vehicle_Number as "Vehicle Number"
				Lorry_Receipt_Number as "Lorry Receipt Number"
				Lorry_Receipt_Proof as "Lorry Receipt Proof"
				POD_Number as "POD Number"
				POD_Proof as "POD Proof"
				Delivery_Date as "Delivery Date"
				Tour_ID as "Tour ID"
				Customer_Number as "Customer Number"
				Get_Visit_Data as "Get Visit Data"
			)
			options
			(
				icon = "travel-hut"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Visit_ID as "Visit ID"
							Customer_Name as "Customer Name"
							Customer_Address as "Customer Address"
							Vehicle_Number as "Vehicle Number"
							Lorry_Receipt_Number as "Lorry Receipt Number"
							Lorry_Receipt_Proof as "Lorry Receipt Proof"
							POD_Number as "POD Number"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Visit_ID as "Visit ID"
							Customer_Name as "Customer Name"
							Customer_Address as "Customer Address"
							Vehicle_Number as "Vehicle Number"
							Lorry_Receipt_Number as "Lorry Receipt Number"
							Lorry_Receipt_Proof as "Lorry Receipt Proof"
							POD_Number as "POD Number"
							POD_Proof as "POD Proof"
							Delivery_Date as "Delivery Date"
							Tour_ID as "Tour ID"
							Customer_Number as "Customer Number"
							Get_Visit_Data as "Get Visit Data"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Alert
	{
		form Alert
		{
			store data in zc = false
			success message = ""
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Condition_field
			(
				type = picklist
				displayname = "Condition"
				values = {"Team Removal", "Tours Exist"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			Team_Removal
			(
    			type = plaintext
				value = "Are you sure you want to remove access to the team(s) for this user?"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				Yes
				(
   					type = submit
   					displayname = "Yes"
				)
				No
				(
   					type = submit
   					displayname = "No"
				)
			}
		}
	}
	functions
	{
 			string idGenerator.getID(string type)
			{
				// This function is used to generate IDs for the Transporters and the Billing Requests
				// input - string - to identify what ID should be generated - accepted values are transporter/billRequest
				// output - string - unique ID for the given type
				str = "";
				if(ifnull(type,"") != "")
				{
					//generate the new ID for the given string type
					genRec = ID_Generator[ID != 0];
					if(input.type == "transporter")
					{
						//ID generation for Transporter
						str = ifnull(genRec.TR_Prefix,"TR") + "-" + ifnull(genRec.TR_Next_ID,"0");
						genRec.TR_Next_ID=ifnull(genRec.TR_Next_ID,0) + 1;
						return str;
					}
					else
					{
						//ID generation for Billing Request
						str = ifnull(genRec.BR_Prefix,"BR") + "-" + ifnull(genRec.BR_Next_ID,"0");
						genRec.BR_Next_ID=ifnull(genRec.BR_Next_ID,0) + 1;
						return str;
					}
				}
				else
				{
					return str;
				}
			}
 			map test(Client_Data clientRec, string batchDate, string team)
			{
				count = 0;
				response = Map();
				response.put("msg","");
				response.put("code","");
				rqstURL = "https://locus-api.com/v1/client/locusdemo/batch/2018-12-24-19-29-05/plan/9106fc42c8434eecb251643d7d0bddf7?include=TOURS";
				baseEncoded = zoho.encryption.base64Encode("mara/personnel/srirams:001b-4fbe");
				prepHeader = Map();
				prepHeader.put("Authorization","Basic " + baseEncoded);
				prepHeader.put("Content-Type","application/json");
				apiResp = getUrl(rqstURL,prepHeader,false);
				if(apiResp.get("responseCode") == "200")
				{
					actResp = apiResp.get("responseText").toMap();
					if(!actResp.isEmpty())
					{
						if(actResp.containKey("tours"))
						{
							toursList = actResp.get("tours").toJSONList();
							if(toursList.isEmpty())
							{
								msg = "Empty tour list received in API.";
								code = 2;
								response.put("msg",msg);
								response.put("code",code);
								return response;
							}
							else
							{
								for each  tour in toursList
								{
									tourMap = tour.toMap();
									if(tourMap.isEmpty())
									{
										msg = "Empty tour obtained while parsing - 'tours' object.";
										code = 2;
										response.put("msg",msg);
										response.put("code",code);
										return response;
									}
									else
									{
										if(tourMap.containKey("tourId"))
										{
											tourID_map = tourMap.get("tourId").toMap();
											if(tourID_map.containKey("tourId"))
											{
												tourID = tourID_map.get("tourId");
												info "Tour id: " + tourID;
												if(tourMap.containKey("visits"))
												{
													visitList = tourMap.get("visits").toJSONList();
													if(visitList.isEmpty())
													{
													}
													else
													{
														actualVisits_str = "";
														for each  visit in visitList
														{
															visitMap = visit.toMap();
															if(visitMap.containKey("visitSource"))
															{
																//&& visitMap.get("visitSource") == "TASK")
																actualVisits_str = ifnull(actualVisits_str,"") + ifnull(visitMap.get("sourceId"),"") + ",";
															}
														}
														actualVisits_str = actualVisits_str.removeLastOccurence(",").replaceAll(",,",",");
														actualVisits = actualVisits_str.toList();
														for each  actualVisit in actualVisits.distinct()
														{
															batchMap_apiResp = thisapp.locusAPI.getFrozenTasks("2018-12-24-19-29-05");
															//info "resp Code: "+ batchMap_apiResp.get("responseCode");
															if(batchMap_apiResp.get("responseCode") == "200")
															{
																batchMap = batchMap_apiResp.get("responseText").toMap();
																if(batchMap.isEmpty())
																{
																	info "batch is empty";
																}
																else
																{
																	if(batchMap.containKey("tasks"))
																	{
																		taskList = batchMap.get("tasks").toJSONList();
																		testStr = thisapp.locusAPI.parseVisits(taskList,actualVisit);
																	}
																	else
																	{
																		info "batch does not contain tasks - negative flow";
																	}
																}
															}
														}
													}
												}
												else
												{
													info "here it is";
												}
											}
											else
											{
												msg = "Tour ID missing inside the 'tourID' object";
												code = 2;
												response.put("msg",msg);
												response.put("code",code);
												return response;
											}
										}
										else
										{
											msg = "Tour ID missing for a tour in the Tour List";
											code = 2;
											response.put("msg",msg);
											response.put("code",code);
											return response;
										}
									}
								}
							}
						}
						else
						{
							msg = "Improper API response received from Locus system.";
							code = 2;
							response.put("msg",msg);
							response.put("code",code);
							return response;
						}
					}
					else
					{
						msg = "The API returned an empty response";
						code = 2;
						response.put("msg",msg);
						response.put("code",code);
						return response;
					}
				}
				else
				{
					msg = "Improper API response - " + apiResp.get("responseCode") + " " + apiResp.get("responseText");
					code = 2;
					response.put("msg",msg);
					response.put("code",code);
					return response;
				}
				return Map();
			}
 			string Notification.dynamicContent(Tours tourId, string msg, string fromID, string toID)
			{
				//this function has 2 uses
				// 1. it is used for replacing parts of the notification content that are dynamic
				// 2. it is used for updating the notification centres
				//
				// input params - tourID - form object to get the appropriate data
				//				- msg - template string where the dynamic content is to be updated
				// output - str - a string that contains the dynamic content for the notification
				//				- also the Notification Centre is updated with the content
				//
				str = "";
				tourRec = Tours[ID == tourId.ID];
				if(tourRec.count() > 0)
				{
					transRec = Transporter_Data[ID == tourRec.Transporter];
					clientRec = Client_Data[ID == tourRec.Client];
					planRec = Plan[ID == tourRec.Bill_Request];
					if(input.msg.len() > 0)
					{
						table = "<br><table border='1px solid blue'><tr><td colspan=2><b>Billing Request : </b>" + planRec.Bill_Request_ID + "</td></tr><tr><th>Tour ID</th><th>Status</th></tr>";
						for each  tour in Tours[Request_Status == "Approve"]
						{
							table = table + "<td>" + tourRec.Tour_ID + "</td><td>" + tourRec.Tour_BR_Status + "</td></tr>";
						}
						table = table + "</table><br>";
						info table;
						content = msg.getSuffix("&lt;content_start&gt;");
						if(content.contains("&lt;content_end&gt;"))
						{
							content = content.getPrefix("&lt;content_end&gt;");
						}
						if(ifnull(fromID,"") != "" && ifnull(toID,"") != "")
						{
							str = msg.replaceAll("&lt;BR_No&gt;",planRec.Bill_Request_ID);
						}
						else
						{
							str = msg.replaceAll("<BR_No>",planRec.Bill_Request_ID);
						}
						str = str.replaceAll("&lt;Transporter_ID&gt;",transRec.Transporter_ID);
						str = str.replaceAll("&lt;Transporter&gt;",transRec.Transporter_Name);
						str = str.replaceAll("&lt;Tour_ID&gt;",tourRec.Tour_ID);
						str = str.replaceAll("&lt;Client_ID&gt;",clientRec.Client_ID);
						str = str.replaceAll("&lt;Client&gt;",clientRec.Client_Name);
						str = str.replaceAll("&lt;content_start&gt;","");
						str = str.replaceAll("&lt;content_end&gt;","");
						str = str.replaceAll("&lt;TOC&gt;",table);
						//str = str.replaceAll("<TOC>", table);
						if(ifnull(fromID,"") != "" && ifnull(toID,"") != "")
						{
							notify = insert into Notification_Centre
			[
				Added_User=zoho.loginuser
				From=fromID
				To=toID
				Message=str
			];
						}
						return str;
					}
					else
					{
						//info "msg length not gt 0";
						return "";
					}
				}
				else
				{
					return "";
				}
			}
 			string format.timeUTC(string dateInput)
			{
				// This function is used to convert the Zoho Creator date-time format into UTC date time format
				// input - Zoho Creator 'date-time' value as 'dateInput'
				// output - UTC date time format for the give input - as 'format'
				//
				toTim = dateInput.toTime();
				format = toTim.getYear() + "-" + toTim.getMonth() + "-" + toTim.getDay() + "T" + toTim.getHour() + ":" + toTim.getMinutes() + ":" + toTim.getSeconds() + ".000Z";
				return format;
			}
 			map locusAPI.getBatches(Client_Data clientRec, string batchDate, string team)
			{
				//******************************************************************************************
				//***currently runs on personal MARA creds - should be switched to Client ids & Authtoken***
				//*************commented lines of code have to be uncommented for dynamic usage*************
				//******************************************************************************************
				//this function is used to fetch all the batches for the given date & team
				//
				response = Map();
				response.put("code","");
				response.put("msg","");
				Teamrec = Teams[Team_Name == input.team];
				//
				clientID = clientRec.Client_ID;
				authToken = clientRec.Authtoken;
				//rqstURL = "https://locus-api.com/v1//client/"+clientID+"/batch";
				rqstURL = "https://locus-api.com/v1/client/" + clientID + "/batch";
				fromTime = batchDate + " 00:00:00";
				toDate = batchDate.toDate();
				toDate_str = toDate.addDay(1).toString();
				toTime = toDate_str + " 00:00:00";
				from_utc = thisapp.format.timeUTC(fromTime);
				info from_utc;
				to_utc = thisapp.format.timeUTC(toTime);
				info to_utc;
				//testeam
				//rqstURL = rqstURL + "?minTime=" + from_utc + "&maxTime=" + to_utc + "&team=" + Teamrec.Team_ID;
				rqstURL = rqstURL + "?minTime=" + from_utc + "&maxTime=" + to_utc + "&team=" + Teamrec.Team_ID;
				baseEncoded = zoho.encryption.base64Encode(clientRec.Personnel_ID.trim() + ":" + clientRec.Authtoken.trim());
				//baseEncoded = zoho.encryption.base64Encode("mara/personnel/srirams:001b-4fbe");
				prepHeader = Map();
				prepHeader.put("Authorization","Basic " + baseEncoded);
				prepHeader.put("Content-Type","application/json");
				batchPlan = Map();
				info rqstURL;
				apiResp = getUrl(rqstURL,prepHeader,false);
				if(apiResp.get("responseCode") == "200")
				{
					actResp = apiResp.get("responseText").toMap();
					if(!actResp.isEmpty())
					{
						respList = List();
						batchList = actResp.get("batches").toJSONList();
						if(batchList.size() > 0)
						{
							for each  batch in batchList
							{
								batchMap = batch.toMap();
								//if(ifnull(batchMap.get("frozenPlanId"),"") != "")
								//{
								batch_idMap = batchMap.get("batchId").toMap();
								frozenMap = batchMap.get("frozenPlanId").toMap();
								batchPlan.put(batch_idMap.get("batchId"),frozenMap.get("planId"));
								info batchMap.get("frozenPlanId");
								respList.add(batch_idMap.get("batchId"));
								//}
							}
							if(respList.size() > 0)
							{
								response.put("code","0");
								response.put("msg",respList);
								response.put("frozenMap",batchPlan);
								return response;
							}
							else
							{
								response.put("code","1");
								response.put("msg","The C&FA has not marked a plan final. Please contact the C&FA for resolution.");
								return response;
							}
						}
						else
						{
							response.put("code","1");
							response.put("msg","There are no order sets for the selected team in this date.");
							return response;
						}
					}
					else
					{
						response.put("code","2");
						response.put("msg","Empty response received!");
						return response;
					}
				}
				else
				{
					response.put("code","2");
					response.put("msg","Error response received - Code: " + apiResp.get("responseCode"));
					return response;
				}
			}
 			map locusAPI.getTeams(Client_Data clientRec)
			{
				rqstURL = "https://locus-api.com/v1/client/" + clientRec.Client_ID + "/team";
				baseEncoded = zoho.encryption.base64Encode("mara/personnel/srirams:001b-4fbe");
				//baseEncoded = zoh.encryption.base64Encode()
				prepHeader = Map();
				prepHeader.put("Authorization","Basic " + baseEncoded);
				prepHeader.put("Content-Type","application/json");
				apiResp = getUrl(rqstURL,prepHeader,false);
				teamList = apiResp.get("responseText").toJSONList();
				for each  team in teamList
				{
					teamMap = team.toMap();
					//info teamMap.get("teamId");
					teamRec = insert into Teams
			[
				Client_Data=clientRec.ID
				Team_Name=teamMap.get("name")
				Added_User=zoho.loginuser
				Team_ID=teamMap.get("teamId")
			];
				}
				return Map();
			}
 			map locusAPI.getPlans(string batch, Start_a_New_Billing_Request rqst, Client_Data clientRec)
			{
				//This function is used for getting the plans from the Batch selected
				//
				response = Map();
				response.put("msg","");
				response.put("code","");
				//
				clientID = clientRec.Client_ID;
				authToken = clientRec.Authtoken;
				rqstURL = "https://locus-api.com/v1/client/test/batch/" + batch + "2018-08-16-14-52-54-181210-kT";
				//testeam
				//rqstURL = rqstURL + "?minTime=" + from_utc + "&maxTime=" + to_utc + "&team=" + Teamrec.Team_ID;
				//rqstURL = rqstURL + "?minTime=" + from_utc + "&maxTime=" + to_utc + "&team=testeam";
				// + Teamrec.Team_ID;
				//baseEncoded = zoho.encryption.base64Encode(clientRec.Client_ID.trim() + ":" + clientRec.Authtoken.trim());
				baseEncoded = zoho.encryption.base64Encode("mara/personnel/srirams:001b-4fbe");
				prepHeader = Map();
				prepHeader.put("Authorization","Basic " + baseEncoded);
				prepHeader.put("Content-Type","application/json");
				apiResp = getUrl(rqstURL,prepHeader,false);
				info apiResp;
				return Map();
			}
 			map locusAPI.getPlan(string planID, string batchID, Client_Data clientRec, Transporter_Data transRec)
			{
				//This function is used to fetch an entire plan by feeding the frozen plan id
				//	input params - planID (ID of the frozen plan)
				// 				 - batchID (ID of the batch that contains the frozen plan)
				//				 - clientRec (client object)
				//	output		 - response (map with 2 key value pairs)
				//				 - 1. code - 0/1 to represent positive/ negative response respectively
				//				 - 2. msg - entire plan/ error message for positive/ negative response
				//
				response = Map();
				response.put("msg","");
				response.put("code","");
				//
				//clientID = clientRec.Client_ID;
				//authToken = clientRec.Authtoken;
				//rqstURL = "https://locus-api.com/v1/client/"+clientRec.Client_ID+"/batch/" + batchID + "plan/"+planID;
				//rqstURL = "https://locus-api.com/v1/client/test/batch/2018-12-27-17-36-01/plan/012722e4bcc14641897422d3065ae21b?include=TOURS";
				rqstURL = "https://locus-api.com/v1/client/" + clientRec.Client_ID + "/batch/" + batchID + "/plan/" + planID + "?include=TOURS";
				info rqstURL;
				//rqstURL = "https://locus-api.com/v1/client/locusdemo/batch/2018-12-24-19-29-05/plan/9106fc42c8434eecb251643d7d0bddf7?include=TOURS";
				//testeam
				//rqstURL = rqstURL + "?minTime=" + from_utc + "&maxTime=" + to_utc + "&team=" + Teamrec.Team_ID;
				//rqstURL = rqstURL + "?minTime=" + from_utc + "&maxTime=" + to_utc + "&team=testeam";
				// + Teamrec.Team_ID;
				baseEncoded = zoho.encryption.base64Encode(clientRec.Personnel_ID.trim() + ":" + clientRec.Authtoken.trim());
				//baseEncoded = zoho.encryption.base64Encode("zoho-devo:539a1162-a84b-41ee-8d02-794a8783b027");
				prepHeader = Map();
				prepHeader.put("Authorization","Basic " + baseEncoded);
				prepHeader.put("Content-Type","application/json");
				apiResp = getUrl(rqstURL,prepHeader,false);
				info apiResp;
				if(apiResp.get("responseCode") == "200")
				{
					actResp = apiResp.get("responseText").toMap();
					if(!actResp.isEmpty())
					{
						// the API response is parsed here - positive flow
						if(actResp.containKey("tours"))
						{
							//the tours are parsed here - positive flow
							toursList = actResp.get("tours").toJSONList();
							if(toursList.isEmpty())
							{
								// the obtained list of tours is empty - negative flow
								msg = "Empty tour list received in API.";
								code = 2;
								response.put("msg",msg);
								response.put("code",code);
								return response;
							}
							else
							{
								planRec = Plan[Plan_ID == input.planID];
								thisapp.locusAPI.parseTours(toursList,batchID,planRec.ID,clientRec,transRec);
								response.put("msg","Tour parsed successfully.");
								response.put("code","0");
								return response;
							}
						}
						else
						{
							// the API rsponse does not contain 'tours' object - negative flow
							msg = "Improper API response received from Locus system.";
							code = 2;
							response.put("msg",msg);
							response.put("code",code);
							return response;
						}
					}
					else
					{
						//the response returned was empty - negative flow
						msg = "The API returned an empty response";
						code = 2;
						response.put("msg",msg);
						response.put("code",code);
						return response;
					}
				}
				else
				{
					//the API response was not correct - improper error code - negative flow
					msg = "Improper API response - " + apiResp.get("responseCode") + " " + apiResp.get("responseText");
					code = 2;
					response.put("msg",msg);
					response.put("code",code);
					return response;
				}
			}
 			map locusAPI.getFrozenTasks(string batchID)
			{
				//This function is used to fetch the Batch which contains the desired frozen plan to get the Visit Addresses
				//
				response = Map();
				response.put("msg","");
				response.put("code","");
				rqstURL = "https://locus-api.com/v1/client/locusdemo/batch/" + batchID + "?include=TASKS";
				//baseEncoded = zoho.encryption.base64Encode(clientRec.Client_ID.trim() + ":" + clientRec.Authtoken.trim());
				baseEncoded = zoho.encryption.base64Encode("mara/personnel/srirams:001b-4fbe");
				prepHeader = Map();
				prepHeader.put("Authorization","Basic " + baseEncoded);
				prepHeader.put("Content-Type","application/json");
				apiResp = getUrl(rqstURL,prepHeader,false);
				//info apiResp;
				return apiResp;
			}
 			void locusAPI.parseVisits(Dump_Form dumpRec, list taskList)
			{
				count = 0;
				taskList = dumpRec.taskList.toJSONList();
				tourMap = dumpRec.planData.toMap();
				tourRec = Tours[Tour_ID == tourMap.get("tourID")];
				actualVisits = tourMap.get("actualVisits");
				for each  task in taskList
				{
					taskMap = task.toMap();
					if(taskMap.containKey("taskId"))
					{
						if(actualVisits.contains(taskMap.get("taskId")))
						{
							//only if the visitList from the plan contains this task
							taskGraph = taskMap.get("taskGraph").toMap();
							taskVisits = taskGraph.get("visits").toJSONList();
							for each  taskVisit in taskVisits
							{
								taskVistMap = taskVisit.toMap();
								if(taskVistMap.get("id") == "customer")
								{
									location = taskVistMap.get("locationOptions").removeFirstOccurence("[");
									location = location.removeLastOccurence("]");
									locationMap = location.toMap();
									addressMap = locationMap.get("locationAddress").toMap();
									address = addressMap.get("formattedAddress");
									countryCode = addressMap.get("countryCode");
									if(!isnull(locationMap.get("contact")))
									{
										contactmap = locationMap.get("contact").toMap();
										name = contactmap.get("name");
										number = contactmap.get("number");
									}
									visitRec = insert into Visits
			[
				Added_User=zoho.loginuser
				Tour_ID=tourRec.ID
				Visit_ID=""
				Customer_Name=ifnull(name,"")
				Customer_Address=ifnull(address,"")
				Customer_Number=ifnull(number,"")
				Vehicle_Number=ifnull(tourMap.get("vehicleNumber"),"")
			];
								}
							}
						}
					}
				}
			}
 			map ZohoTest()
			{
				a = 1;
				response = Map();
				count = 0;
				response.put("msg","");
				response.put("code","");
				rqstURL = "https://locus-api.com/v1/client/locusdemo/batch/2018-12-24-19-29-05/plan/9106fc42c8434eecb251643d7d0bddf7?include=TOURS";
				baseEncoded = zoho.encryption.base64Encode("mara/personnel/srirams:001b-4fbe");
				prepHeader = Map();
				prepHeader.put("Authorization","Basic " + baseEncoded);
				prepHeader.put("Content-Type","application/json");
				apiResp = getUrl(rqstURL,prepHeader,false);
				if(apiResp.get("responseCode") == "200")
				{
					actResp = apiResp.get("responseText").toMap();
					if(!actResp.isEmpty())
					{
						if(actResp.containKey("tours"))
						{
							toursList = actResp.get("tours").toJSONList();
							if(toursList.isEmpty())
							{
								msg = "Empty tour list received in API.";
								code = 2;
								response.put("msg",msg);
								response.put("code",code);
								return response;
							}
							else
							{
								for each  tour in toursList
								{
									tourMap = tour.toMap();
									if(tourMap.isEmpty())
									{
										msg = "Empty tour obtained while parsing - 'tours' object.";
										code = 2;
										response.put("msg",msg);
										response.put("code",code);
										return response;
									}
									else
									{
										if(tourMap.containKey("tourId"))
										{
											tourID_map = tourMap.get("tourId").toMap();
											if(tourID_map.containKey("tourId"))
											{
												tourID = tourID_map.get("tourId");
												info "Tour id: " + tourID;
												if(tourMap.containKey("visits"))
												{
													visitList = tourMap.get("visits").toJSONList();
													if(visitList.isEmpty())
													{
													}
													else
													{
														actualVisits_str = "";
														for each  visit in visitList
														{
															visitMap = visit.toMap();
															if(visitMap.containKey("visitSource"))
															{
																//&& visitMap.get("visitSource") == "TASK")
																actualVisits_str = ifnull(actualVisits_str,"") + ifnull(visitMap.get("sourceId"),"") + ",";
															}
														}
														actualVisits_str = actualVisits_str.removeLastOccurence(",").replaceAll(",,",",");
														actualVisits = actualVisits_str.toList();
														for each  actualVisit in actualVisits.distinct()
														{
															batchMap_apiResp = thisapp.locusAPI.getFrozenTasks("2018-12-24-19-29-05");
															//info "resp Code: "+ batchMap_apiResp.get("responseCode");
															if(batchMap_apiResp.get("responseCode") == "200")
															{
																batchMap = batchMap_apiResp.get("responseText").toMap();
																if(batchMap.isEmpty())
																{
																	info "batch is empty";
																}
																else
																{
																	if(batchMap.containKey("tasks"))
																	{
																		if(a <= 5)
																		{
																			taskList = batchMap.get("tasks").toJSONList();
																			testStr = thisapp.locusAPI.parseVisits(taskList,actualVisit);
																			a = a + 1;
																		}
																	}
																	else
																	{
																		info "batch does not contain tasks - negative flow";
																	}
																}
															}
														}
													}
												}
												else
												{
													info "here it is";
												}
											}
											else
											{
												msg = "Tour ID missing inside the 'tourID' object";
												code = 2;
												response.put("msg",msg);
												response.put("code",code);
												return response;
											}
										}
										else
										{
											msg = "Tour ID missing for a tour in the Tour List";
											code = 2;
											response.put("msg",msg);
											response.put("code",code);
											return response;
										}
									}
								}
							}
						}
						else
						{
							msg = "Improper API response received from Locus system.";
							code = 2;
							response.put("msg",msg);
							response.put("code",code);
							return response;
						}
					}
					else
					{
						msg = "The API returned an empty response";
						code = 2;
						response.put("msg",msg);
						response.put("code",code);
						return response;
					}
				}
				else
				{
					msg = "Improper API response - " + apiResp.get("responseCode") + " " + apiResp.get("responseText");
					code = 2;
					response.put("msg",msg);
					response.put("code",code);
					return response;
				}
				return response;
			}
 			map locusAPI.getBatch_byId(Client_Data clientRec, string batchID, Visits visitRec)
			{
				//This function is used to fetch the Batch which contains the desired frozen plan to get the Visit Addresses
				//
				// Response codes - 
				//			0 - positive response in output
				//			1 - error due to important values missing in the API response
				//			other codes - error response received for API call
				response = Map();
				response.put("msg","");
				response.put("code","");
				count = 0;
				rqstURL = "https://locus-api.com/v1/client/" + clientRec.Client_ID + "/batch/" + batchID + "?include=TASKS";
				//rqstURL = "https://locus-api.com/v1/client/locusdemo/batch/2018-12-24-19-29-05?include=TASKS";
				baseEncoded = zoho.encryption.base64Encode(clientRec.Personnel_ID.trim() + ":" + clientRec.Authtoken.trim());
				//baseEncoded = zoho.encryption.base64Encode("mara/personnel/srirams:001b-4fbe");
				prepHeader = Map();
				prepHeader.put("Authorization","Basic " + baseEncoded);
				prepHeader.put("Content-Type","application/json");
				apiResp = getUrl(rqstURL,prepHeader,false);
				if(apiResp.get("responseCode") == "200")
				{
					batchMap = apiResp.get("responseText").toMap();
					if(!batchMap.isEmpty() && batchMap.containKey("tasks"))
					{
						actualTasks = List();
						taskList = batchMap.get("tasks").toJSONList();
						actualVisit = Map();
						for each  task in taskList
						{
							taskMap = task.toMap();
							if(taskMap.containKey("taskId") && taskMap.get("taskId") == visitRec.Visit_ID && taskMap.containKey("taskGraph"))
							{
								taskGraph = taskMap.get("taskGraph").toMap();
								visitList = taskGraph.get("visits").toJSONList();
								for each  visit in visitList
								{
									visitMap = visit.toMap();
									if(visitMap.get("id") == "customer" && ifnull(visitMap.get("locationOptions"),"") != "")
									{
										locationList = visitMap.get("locationOptions").toJSONList();
										for each  location in locationList
										{
											locationMap = location.toMap();
											addressMap = locationMap.get("locationAddress").toMap();
											address = addressMap.get("formattedAddress");
											countryCode = addressMap.get("countryCode");
											if(ifnull(locationMap.get("contact"),"") != "")
											{
												contactmap = locationMap.get("contact").toMap();
												name = contactmap.get("name");
												number = contactmap.get("number");
											}
											actualVisit.put("address",address);
											actualVisit.put("number",number);
											actualVisit.put("name",name);
										}
									}
								}
							}
						}
						if(!actualVisit.isEmpty())
						{
							response.put("msg",actualVisit);
							response.put("code","0");
							return response;
						}
						else
						{
							response.put("msg","Record updation failed due to improper data!");
							response.put("code","1");
							return response;
						}
					}
					else
					{
						response.put("msg","API response from Locus is empty or does not contain any tasks!");
						response.put("code","1");
						return response;
					}
				}
				else
				{
					response.put("msg",apiResp.get("responseText"));
					response.put("code",apiResp.get("responseCode"));
					return response;
				}
			}
 			void creatorAPI.updateRecord(int recID, list toursList)
			{
				//this function is for updating a record in zoho creator through REST API
				//this updation will in turn trigger the parsing of the response from Locus API - which will be executed as a separate batch of code (thus avoiding the LOC limit)
				//
				// input - ID of the record to be updated through REST API
				// output - none
				// outcome - updation of the record in the Dump Form & Trigger parsing of the Locus API response
				//
				creatorAuth = ID_Generator[ID != 0].Creator_Authtoken;
				url = "https://creator.zoho.com/api/zoho_toshi12/json/locus-recon/view/All_Dumps/record/update";
				reqmap = Map:String();
				reqmap.put("authtoken",creatorAuth);
				reqmap.put("scope","creatorapi");
				reqmap.put("zc_ownername","zoho_toshi12");
				reqmap.put("criteria","ID==" + recID);
				reqmap.put("plain",toursList);
				reqmap.put("API_Triggered",true);
				resp = postUrl(url,reqmap);
			}
 			void locusAPI.parseTours(list toursList, string batchID, int planRec, Client_Data clientRec, Transporter_Data transRec)
			{
				//
				//clientRec = Client_Data[Client_ID == "test"];
				plan = Plan[ID == planRec];
				//
				for each  tour in toursList
				{
					tourMap = tour.toMap();
					//tour ID
					tourIdMap = tour.get("tourId").toMap();
					tourID = tourIdMap.get("tourId");
					actualTour_Id = batchID + "-" + plan.Plan_ID + "-" + tourID;
					tourSummary = tourMap.get("summary").toMap();
					//tour Distance
					tourDistance = tourSummary.get("totalTravelDistance");
					//tour Cost
					tourCost = tourDistance.get("freightCost");
					vehicleMap = tourMap.get("vehicle");
					vehicleIdMap = vehicleMap.get("id");
					vehicleModel = vehicleMap.get("vehicleModel").toMap();
					//vehicle Number
					vehicleNumber = vehicleIdMap.get("id").toLong();
					//vehicleType
					vehicleType = vehicleModel.get("vehicleType");
					actualVisits = List();
					visitList = tourMap.get("visits").toJSONList();
					for each  visit in visitList
					{
						visitMap = visit.toMap();
						if(visitMap.get("id") == "customer" && visitMap.get("visitSource") == "TASK")
						{
							actualVisits.add(visitMap.get("sourceId"));
						}
					}
					parsedTour = Map();
					tour = insert into Tours
			[
				Added_User=zoho.loginuser
				Bill_Request=planRec
				Tour_BR_Status="Open"
				Client=clientRec.ID
				Tour_ID=actualTour_Id
				Tour_Distance=ifnull(tourDistance,0.0)
				Planned_Tour_Cost=ifnull(tourCost,0.0)
				Vehicle_Number=vehicleNumber
				Vehicle_Type=vehicleType
				Transporter=transRec.ID
			];
					parsedTour.put("actualVisits",actualVisits);
					parsedTour.put("batchId",batchID);
					tourRec = Tours[ID == tour];
					tourRec.Task_List=parsedTour.toString();
					for each  actualVisit in actualVisits
					{
						newVisit = insert into Visits
			[
				Added_User=zoho.loginuser
				Tour_ID=tour
				Visit_ID=actualVisit
			];
					}
				}
			}
 			void newTest()
			{
				//planRecId = Plan[Team == "SPMD locus demo" && Date_field == "28-Dec-2018"].Bill_Request_ID;
				//clientPersonnel = Client_POC_List[Email_ID == "sierezzz@gmail.com"];
				// 	tranPersonnel = Transporter_POC_List[Email_ID == "sribumblebee@gmail.com"];
				// 	for each  tour in Tours[Tour_Distance > 0.0]
				// 	{
				// 		info tour.Client;
				// 		info tranPersonnel.Transporter_ID.Client_Data;
				// 		//info clientPersonnel.Client;
				// 	}
				// 	a = Client_POC_List[Email_ID == zoho.loginuserid].Client;
				// 	b = Transporter_POC_List[Email_ID == zoho.loginuserid].Transporter_ID;
				// 	str = "2019-01-09T06:41:48.761+0000";
				// 	info zoho.currenttime;
				// 	str = str.replaceAll("T"," ");
				// 	str = str.getPrefix(".").toTime();
				// 	info str;
				//cR = Client_Data[Client_ID == "locusdemo"];
				//info Transporter_Data[Client_Data == cR.ID && Transporter_ID == "TR-1201"].ID;
				//info Transporter_POC_List[Email_ID == "akshyris@gmail.com"].Transporter_ID;
				tR = Tours[ID == 3599541000001043019];
				tR.Request_Status=null;
			}
 			void creatorAPI.createRecord(map planData)
			{
				//this function is for updating a record in zoho creator through REST API
				//this updation will in turn trigger the parsing of the response from Locus API - which will be executed as a separate batch of code (thus avoiding the LOC limit)
				//
				// input - ID of the record to be updated through REST API
				// output - none
				// outcome - updation of the record in the Dump Form & Trigger parsing of the Locus API response
				//
				creatorAuth = ID_Generator[ID != 0].Creator_Authtoken;
				url = "https://creator.zoho.com/api/zoho_toshi12/json/locus-recon/form/Dump_Form/record/add";
				reqmap = Map:String();
				reqmap.put("authtoken",creatorAuth);
				reqmap.put("scope","creatorapi");
				reqmap.put("zc_ownername","zoho_toshi12");
				reqmap.put("planData",planData);
				reqmap.put("API_Triggered",true);
				resp = postUrl(url,reqmap);
				info resp;
			}
 			void ZohoTEST2()
			{
				//This function is used to fetch the Batch which contains the desired frozen plan to get the Visit Addresses
				//
				// Response codes - 
				//			0 - positive response in output
				//			1 - error due to important values missing in the API response
				//			other codes - error response received for API call
				response = Map();
				response.put("msg","");
				response.put("code","");
				count = 0;
				//rqstURL = "https://locus-api.com/v1/client/" + clientRec.Client_ID + "/batch/" + batchID + "?include=TASKS";
				rqstURL = "https://locus-api.com/v1/client/locusdemo/batch/2018-12-24-19-29-05?include=TASKS";
				//baseEncoded = zoho.encryption.base64Encode(clientRec.Client_ID.trim() + ":" + clientRec.Authtoken.trim());
				baseEncoded = zoho.encryption.base64Encode("mara/personnel/srirams:001b-4fbe");
				prepHeader = Map();
				prepHeader.put("Authorization","Basic " + baseEncoded);
				prepHeader.put("Content-Type","application/json");
				apiResp = getUrl(rqstURL,prepHeader,false);
				if(apiResp.get("responseCode") == "200")
				{
					batchMap = apiResp.get("responseText").toMap();
					dumpRec = Dump_Form[taskList == null && planData != null];
					tourMap = dumpRec.planData.toMap();
					info tourMap;
					actualVisits = tourMap.get("actualVisits");
					if(!batchMap.isEmpty())
					{
						info "batch is not empty";
						actualTasks = List();
						if(batchMap.containKey("tasks"))
						{
							taskList = batchMap.get("tasks");
							//.toJSONList();
							for each  task in taskList
							{
								taskMap = task.toMap();
								if(taskMap.containKey("taskId"))
								{
									if(actualVisits.contains(taskMap.get("taskId")))
									{
										info "task list parsing";
										actualTasks.add(taskMap);
										count = count + 1;
										info taskMap.get("taskId");
									}
								}
							}
							//only if the visitList from the plan contains this task
							//info "actualTasks - " + count;
							info "ActTasks : " + actualTasks;
							//update record into dump form through REST API here
							//		thisapp.creatorAPI.updateRecord(dumpRec.ID,actualTasks);
							response.put("msg","Record updated successfully");
							response.put("code","0");
							//response.put("recId",dumpRec);
							info response;
						}
						else
						{
							response.put("msg","Task list empty for the selected batch.");
							response.put("code","1");
							info response;
						}
					}
					else
					{
						response.put("msg","API response from Locus is empty");
						response.put("code","1");
						info response;
					}
				}
				else
				{
					response.put("msg",apiResp.get("responseText"));
					response.put("code",apiResp.get("responseCode"));
					info response;
				}
			}
 			map locusAPI.getTask(string taskId, Client_Data clientRec, int tourRec)
			{
				// This function is used for getting the details of an individual task when the Client / Transporter personnel wishes to see them in the Tour
				//
				response = Map();
				response.put("code","");
				response.put("msg","");
				//url = "https://locus-api.com/v1/client/"+clientRec.Client_ID+"/task/"+input.taskId;
				url = "https://locus-api.com/v1/client/" + clientRec.Client_ID + "/task/" + taskId;
				//baseEncoded = zoho.encryption.base64Encode(clientRec.Client_ID.trim() + ":" + clientRec.Authtoken.trim());
				baseEncoded = zoho.encryption.base64Encode("mara/personnel/srirams:001b-4fbe");
				prepHeader = Map();
				prepHeader.put("Authorization","Basic " + baseEncoded);
				prepHeader.put("Content-Type","application/json");
				apiResp = getUrl(url,prepHeader,false);
				actualTour = Tours[ID == tourRec];
				if(apiResp.get("responseCode") == "200")
				{
					actResp = apiResp.get("responseText").toMap();
					if(!actResp.isEmpty())
					{
						if(actResp.containKey("tourId") && ifnull(actResp.get("tourId"),"[]") != "[]")
						{
							tourmap = actResp.get("tourId");
							tourId = tourmap.get("tourId");
							if(tourmap.get("tourId") == actualTour.Tour_ID)
							{
								if(actResp.containKey("taskId") && actResp.get("taskId") == input.taskId)
								{
									taskMap = actResp.get("taskGraph").toMap();
									visitsList = taskMap.get("visits").toJSONList();
									actualVisits = List();
									for each  visit in visitsList
									{
										visitMap = visit.tomap();
										actualVisit = Map();
										if(visitMap.get("id") == "customer")
										{
											locationMap = ifnull(visitMap.get("chosenLocation"),"{}").toMap();
											if(!locationMap.isEmpty())
											{
												addressMap = locationMap.get("locationAddress");
												address = addressMap.get("formattedAddress");
												actualVisit.put("address",address);
												contact = locationMap.get("contact");
												if(ifnull(contact,"") != "")
												{
													contactMap = contact.toMap();
													name = contactMap.get("name");
													number = contactMap.get("number");
													actualVisit.put("name",name);
													actualVisit.put("number",number);
												}
											}
											else
											{
												locationList = visitMap.get("locationOptions").toJSONList();
												for each  location in locationList
												{
													locationMap = location.toMap();
													addressMap = locationMap.get("locationAddress");
													address = addressMap.get("formattedAddress");
													actualVisit.put("address",address);
													contact = locationMap.get("contact");
													if(ifnull(contact,"") != "")
													{
														contactMap = contact.toMap();
														name = contactMap.get("name");
														number = contactMap.get("number");
														actualVisit.put("name",name);
														actualVisit.put("number",number);
													}
												}
											}
											actualVisits.add(actualVisit);
										}
									}
									//positive response containing - address & possibly the name and phone number of the customer
									response.put("code","0");
									response.put("msg",actualVisits);
									return response;
								}
								else
								{
									response.put("code","1");
									response.put("msg","Wrong visit fetched. Contact Administrator.");
									return response;
								}
							}
							else
							{
								response.put("code","1");
								response.put("msg","Tour mismatch. Contact administrator.");
								return response;
							}
						}
						else
						{
							response.put("code","1");
							response.put("msg","Unknow route plan. Contact administrator.");
							return response;
						}
					}
					else
					{
						response.put("code","1");
						response.put("msg","Failed to get Visit data! Contact administrator.");
						return response;
					}
				}
				else
				{
					response.put("code",apiResp.get("responseCode"));
					response.put("msg",apiResp.get("responseText") + " Contact Administrator.");
					return response;
				}
			}
 			map locusAPI.getBatch_byId_clone(Client_Data clientRec, string batchID, Visits visitRec)
			{
				//This function is used to fetch the Batch which contains the desired frozen plan to get the Visit Addresses
				//
				// Response codes - 
				//			0 - positive response in output
				//			1 - error due to important values missing in the API response
				//			other codes - error response received for API call
				response = Map();
				response.put("msg","");
				response.put("code","");
				count = 0;
				rqstURL = "https://locus-api.com/v1/client/" + clientRec.Client_ID + "/batch/" + batchID + "?include=TASKS";
				//rqstURL = "https://locus-api.com/v1/client/locusdemo/batch/2018-12-24-19-29-05?include=TASKS";
				baseEncoded = zoho.encryption.base64Encode(clientRec.Personnel_ID.trim() + ":" + clientRec.Authtoken.trim());
				//baseEncoded = zoho.encryption.base64Encode("mara/personnel/srirams:001b-4fbe");
				prepHeader = Map();
				prepHeader.put("Authorization","Basic " + baseEncoded);
				prepHeader.put("Content-Type","application/json");
				apiResp = getUrl(rqstURL,prepHeader,false);
				if(apiResp.get("responseCode") == "200")
				{
					batchMap = apiResp.get("responseText").toMap();
					if(!batchMap.isEmpty() && batchMap.containKey("tasks"))
					{
						actualTasks = List();
						taskList = batchMap.get("tasks").toJSONList();
						actualVisit = Map();
						for each  task in taskList
						{
							taskMap = task.toMap();
							if(taskMap.containKey("taskId") && taskMap.get("taskId") == visitRec.Visit_ID && taskMap.containKey("taskGraph"))
							{
								taskGraph = taskMap.get("taskGraph").toMap();
								visitList = taskGraph.get("visits").toJSONList();
								for each  visit in visitList
								{
									visitMap = visit.toMap();
									if(visitMap.get("id") == "customer" && ifnull(visitMap.get("locationOptions"),"") != "")
									{
										locationList = visitMap.get("locationOptions").toJSONList();
										for each  location in locationList
										{
											locationMap = location.toMap();
											addressMap = locationMap.get("locationAddress").toMap();
											address = addressMap.get("formattedAddress");
											countryCode = addressMap.get("countryCode");
											if(ifnull(locationMap.get("contact"),"") != "")
											{
												contactmap = locationMap.get("contact").toMap();
												name = contactmap.get("name");
												number = contactmap.get("number");
											}
											actualVisit.put("address",address);
											actualVisit.put("number",number);
											actualVisit.put("name",name);
										}
									}
								}
							}
						}
						if(!actualVisit.isEmpty())
						{
							response.put("msg",actualVisit);
							response.put("code","0");
							return response;
						}
						else
						{
							response.put("msg","Record updation failed due to improper data!");
							response.put("code","1");
							return response;
						}
					}
					else
					{
						response.put("msg","API response from Locus is empty or does not contain any tasks!");
						response.put("code","1");
						return response;
					}
				}
				else
				{
					response.put("msg",apiResp.get("responseText"));
					response.put("code",apiResp.get("responseCode"));
					return response;
				}
			}
	}
	workflow
	{
		form
		{
			Create_Record_Scripts_Cli as "Create Record Scripts - Client"
			{
    			type =  form
				form = Review_Billing_Request
				on add
				{
					actions 
					{
						on user input of Date_field
						(
							if(input.Date_field != null)
										{
											if(input.Date_field > zoho.currentdate)
											{
												alert "Future dates are not allowed.";
												input.Date_field = null;
											}
										}
						)	
						on load
						(
							client_personnel = Client_POC_List[Email_ID == zoho.loginuserid];
										if(client_personnel.count() == 0)
										{
											openUrl(zoho.appuri + "#Form:Unauthorised_Access","same window");
										}
										else if(client_personnel.count() == 1)
										{
											teamList = List();
											for each  team in client_personnel.Associated_Teams
											{
												associatedTeam = Teams[ID == team].Team_Name;
												if(ifnull(associatedTeam,"") != "")
												{
													teamList.add(associatedTeam);
												}
											}
											input.Team:ui.add(teamList);
											input.Triggered_By = zoho.loginuserid;
											hide Triggered_By;
										}
						)	
						on success
						(
							if(!isnull(input.Date_field) && ifnull(input.Team,"") != "")
										{
											//this part of the code will fetch the billing requests raised by the Transporters (if any)
											//info input.Team;
											//info input.Date_field;
											planRecId = Plan[Team == input.Team && Date_field == input.Date_field && Status == "Open"].Bill_Request_ID;
											if(ifnull(planRecId,"") != "")
											{
												openUrl(zoho.appuri + "#Report:Pending_Verification?Bill_Request=" + planRecId,"same window");
											}
											else
											{
												openUrl(zoho.appuri + "#Report:Pending_Verification","same window");
											}
										}
						)	
					}
				}
			}
			Create_Record_Scripts_Tra as "Create Record Scripts - Transporter"
			{
    			type =  form
				form = Start_a_New_Billing_Request
				on add
				{
					actions 
					{
						on load
						(
							transporter_personnel = Transporter_POC_List[Email_ID == zoho.loginuserid];
										if(transporter_personnel.count() == 0)
										{
											openUrl(zoho.appuri + "#Form:Unauthorised_Access","same window");
										}
										else
										{
											//hide Dump_Data;
											input.Transporter = transporter_personnel.Transporter_ID;
											disable Transporter;
											input.Team:ui.add(transporter_personnel.Accessible_Teams.Team_Name);
										}
						)	
					}
				}
			}
			User_Input_Scripts_Transp as "User Input Scripts - Transporter"
			{
    			type =  form
				form = Tours
				on edit
				{
					actions 
					{
						on user input of Transporter_Submit
						(
							transporterPoc = Transporter_POC_List[Email_ID == zoho.loginuserid];
										if(transporterPoc.count() > 0)
										{
											if(input.Transporter_Submit == true)
											{
												if(ifnull(input.Actual_Cost,0.0) < 0.0)
												{
													alert "Enter 'Actual Cost' before marking the Tour as complete!";
													input.Transporter_Submit = false;
												}
											}
											else
											{
												input.Tour_BR_Status = "Open";
											}
										}
						)	
						on user input of Actual_Cost
						(
							if(ifnull(input.Actual_Cost,0.0) > 0.0)
										{
											if(Transporter_POC_List[Email_ID == zoho.loginuserid].count() > 0)
											{
												show Transporter_Submit;
											}
											else
											{
												alert "Only Transporter is allowed to update the 'Actual Cost'.";
												input.Actual_Cost = null;
											}
										}
										else
										{
											hide Transporter_Submit;
										}
						)	
					}
				}
			}
			Edit_Record_Tour as "Edit Record - Tour"
			{
    			type =  form
				form = Tours
				on edit
				{
					actions 
					{
						on validate
						(
							tranPersonnel = Transporter_POC_List[Email_ID == zoho.loginuserid];
										clientPersonnel = Client_POC_List[Email_ID == zoho.loginuserid];
										if(tranPersonnel.count() > 0 && input.Transporter_Submit == true && input.Client == tranPersonnel.Transporter_ID.Client_Data)
										{
											//validation for Transporter Personnel - on submitting fully Updated tour
											for each  visitRec in Tour_Visits
											{
												if(ifnull(visitRec.Lorry_Receipt_Proof,"") == "")
												{
													alert "LR proof missing for visit - " + visitRec.Visit_ID;
													cancel submit;
												}
												else
												{
													if(visitRec.Lorry_Receipt_Proof.endsWith("pdf") || visitRec.Lorry_Receipt_Proof.endsWith("jpg") || visitRec.Lorry_Receipt_Proof.endsWith("jpeg"))
													{
														//valid format
													}
													else
													{
														alert "Invlid file format for LR Proof in Visit - " + visitRec.Visit_ID + ". Only 'PDF' & 'JPEG' formats are allowed";
														cancel submit;
													}
												}
												if(ifnull(visitRec.POD_Proof,"") != "")
												{
													if(visitRec.POD_Proof.endsWith("pdf") || visitRec.POD_Proof.endsWith("jpg") || visitRec.POD_Proof.endsWith("jpeg"))
													{
														//valid format
													}
													else
													{
														alert "Invlid file format for POD Proof in Visit - " + visitRec.Visit_ID + ". Only 'PDF' & 'JPEG' formats are allowed";
														cancel submit;
													}
												}
											}
											if(ifnull(input.Invoice_Proof,"") != "")
											{
												//check to ensure he file format of the Invoice proof uploaded.
												if(input.Invoice_Proof.endsWith("pdf") || input.Invoice_Proof.endsWith("jpg") || input.Invoice_Proof.endsWith("jpeg"))
												{
													//valid format
												}
												else
												{
													alert "Invlid file format for Invoice Proof. Only 'PDF' & 'JPEG' formats are allowed";
													cancel submit;
												}
											}
										}
										else if(tranPersonnel.count() > 0 && input.Client == tranPersonnel.Transporter_ID.Client_Data)
										{
											//validation for Transporter Personnel - on submitting partially Updated tour
											for each  visitRec in Tour_Visits
											{
												if(ifnull(visitRec.Lorry_Receipt_Proof,"") != "")
												{
													if(visitRec.Lorry_Receipt_Proof.endsWith("pdf") || visitRec.Lorry_Receipt_Proof.endsWith("jpg") || visitRec.Lorry_Receipt_Proof.endsWith("jpeg"))
													{
														//valid format
													}
													else
													{
														alert "Invlid file format for LR Proof in Visit - " + visitRec.Visit_ID + ". Only 'PDF' & 'JPEG' formats are allowed";
														cancel submit;
													}
												}
												if(ifnull(visitRec.POD_Proof,"") != "")
												{
													if(visitRec.POD_Proof.endsWith("pdf") || visitRec.POD_Proof.endsWith("jpg") || visitRec.POD_Proof.endsWith("jpeg"))
													{
														//valid format
													}
													else
													{
														alert "Invlid file format for POD Proof in Visit - " + visitRec.Visit_ID + ". Only 'PDF' & 'JPEG' formats are allowed";
														cancel submit;
													}
												}
											}
										}
										else if(clientPersonnel.count() > 0 && input.Client == clientPersonnel.Client)
										{
											//Validation for Client Personnel
											if(input.Request_Status == "Reject" && ifnull(input.Reason_for_Rejection,"") == "")
											{
												alert "You have to provide a reason for rejection (in the Rejection Comment area).";
												cancel submit;
											}
										}
										else
										{
											alert "You are not allowed to Update or Edit this data!";
											cancel submit;
										}
						)	
						on user input of Tour_Visits.Get_Visit_Data
						(
							if(row.Get_Visit_Data == true && ifnull(input.Task_List,"") != "")
										{
											if(ifnull(row.Customer_Name,"") == "" && ifnull(row.Customer_Address,"") == "" && ifnull(row.Customer_Number,"") == "")
											{
												clientRec = Client_Data[ID == input.Client];
												batchmap = input.Task_List.toMap();
												batchId = batchmap.get("batchId");
												visitRec = Visits[ID == row.ID];
												respMap = thisapp.locusAPI.getBatch_byId(clientRec,batchId,visitRec);
												//respMap = thisapp.locusAPI.getTask(row.Visit_ID,clientRec,input.ID);
												if(respMap.get("code") == "0" && respMap.containKey("msg"))
												{
													visitMap = respMap.get("msg");
													row.Customer_Address=visitMap.get("address");
													row.Customer_Name=visitMap.get("name");
													row.Customer_Number=visitMap.get("number");
												}
												else if(respMap.containKey("code") && respMap.containKey("msg"))
												{
													alert respMap.get("msg");
													row.Get_Visit_Data=false;
												}
											}
											// 		for each subRec in Tour_Visits
											// 	    {
											// 			if(ifnull(subRec.Customer_Name,"") == "" && ifnull(subRec.Customer_Address,"") == "" && ifnull(subRec.Customer_Number,"") == "")
											// 		{
											// 			clientRec = Client_Data[ID == input.Client];
											// 			batchmap = input.Task_List.toMap();
											// 			batchId = batchmap.get("batchId");
											// 			visitRec = Visits[ID == row.ID];
											// 			respMap = thisapp.locusAPI.getBatch_byId_clone(clientRec,batchId,visitRec);
											// 			//respMap = thisapp.locusAPI.getTask(row.Visit_ID,clientRec,input.ID);
											// 			if(respMap.get("code") == "0" && respMap.containKey("msg"))
											// 			{
											// 				visitMap = respMap.get("msg");
											// 				subRec.Customer_Address=visitMap.get("address");
											// 				subRec.Customer_Name=visitMap.get("name");
											// 				subRec.Customer_Number=visitMap.get("number");
											// 			}
											// 			else if(respMap.containKey("code") && respMap.containKey("msg"))
											// 			{
											// 				alert respMap.get("msg");
											// 				subRec.Get_Visit_Data=false;
											// 			}
											// 		}
											// 	} 
										}
						)	
						on success
						(
							clientRec = Client_POC_List[Email_ID == zoho.loginuserid];
										transRec = Transporter_POC_List[Email_ID == zoho.loginuserid];
										if(input.Client == clientRec.Client && ifnull(input.Client,0) != 0)
										{
											if(ifnull(input.Tour_BR_Status,"") != "")
											{
												scenario = "";
												sender = "";
												toList_Transporter = "";
												for each  t_poc in Transporter_POC_List[Transporter_ID == input.Transporter]
												{
													toList_Transporter = ifnull(toList_Transporter,"") + t_poc.Email_ID + ",";
												}
												toList_Transporter = toList_Transporter.removeLastOccurence(",");
												//check status of other tours in the plan if the tour is approved
												//send email to the transporter if the tour is rejected
												if(input.Tour_BR_Status == "Approved" && clientRec.count() > 0)
												{
													openTours = 0;
													for each  trip in Tours[Bill_Request == input.Bill_Request]
													{
														if(trip.Tour_BR_Status != "Approved")
														{
															openTours = openTours + 1;
														}
													}
													if(openTours == 0)
													{
														//send email to transporter stating that billing request <bill_request_number> has been approved
														scenario = "Billing Request Approved";
														sender = "Client";
														notification = Notification_Setup[Scenario == scenario && Sender_field == sender];
														sendmail
														[
															from :zoho.loginuserid
															to :toList_Transporter
															subject :thisapp.Notification.dynamicContent(Tours[ID == input.ID],notification.Subject_field,null,null)
															message :thisapp.Notification.dynamicContent(Tours[ID == input.ID],notification.Body,zoho.loginuserid,toList_Transporter)
														]
													}
												}
												else if(input.Tour_BR_Status == "Reopen" && clientRec.count() > 0)
												{
													input.Transporter_Submit = false;
													//input.Request_Status = null;
													//send email to transporter stating that tour <tour_id> for the billing request <bill_request_number> has been rejected.
													scenario = "Tour Rejection";
													sender = "Client";
													notification = Notification_Setup[Scenario == scenario && Sender_field == sender];
													sendmail
													[
														from :zoho.loginuserid
														to :toList_Transporter
														subject :thisapp.Notification.dynamicContent(Tours[ID == input.ID],notification.Subject_field,null,null)
														message :thisapp.Notification.dynamicContent(Tours[ID == input.ID],notification.Body,zoho.loginuserid,toList_Transporter)
													]
												}
											}
										}
										if(ifnull(input.Reason_for_Rejection,"") != "" && clientRec.count() > 0)
										{
											//input.Comments_History = ifnull(input.Comments_History,"") + "<br><b>" + clientRec.Email_ID + "--" + zoho.currenttime + "<b><br>" + input.Reason_for_Rejection;
											input.Comments_History = ifnull(input.Comments_History,"") + "\n CLIENT (" + clientRec.Email_ID + " ) - " + zoho.currenttime + "\n" + input.Reason_for_Rejection;
										}
										else if(ifnull(input.Transporter_Comments,"") != "" && transRec.count() > 0)
										{
											//input.Comments_History = ifnull(input.Comments_History,"") + "<br><b>" + transRec.Email_ID + "--" + zoho.currenttime + "<b><br>" + input.Transporter_Comments;
											input.Comments_History = ifnull(input.Comments_History,"") + "\n TRANSPORTER (" + transRec.Email_ID + " ) - " + zoho.currenttime + "\n" + input.Transporter_Comments;
											if(ifnull(input.Request_Status,"") != "")
											{
												input.Request_Status = null;
											}
										}
						)	
					}
				}
			}
			Restrict_Access as "Restrict Access"
			{
    			type =  form
				form = Start_a_New_Billing_Request
				on add
				{
					actions 
					{
						on load
						(
							personnelRec = Transporter_POC_List[Email_ID == zoho.loginuserid];
										if(personnelRec.count() == 1)
										{
											hide Started_By;
											input.Started_By = zoho.loginuserid;
											hide Client_Data;
											input.Client_Data = personnelRec.Transporter_ID.Client_Data;
										}
						)	
					}
				}
			}
			Restrict_view_for_Transpo as "Restrict view for Transporter"
			{
    			type =  form
				form = Tours
				on add or edit
				{
					actions 
					{
						on load
						(
							transRec = Transporter_POC_List[Email_ID == zoho.loginuserid].Transporter_ID;
										clientRec = Client_POC_List[Email_ID == zoho.loginuserid].Client;
										disable Comments_History;
										if(input.Transporter == transRec && ifnull(input.Transporter,0) != 0)
										{
											show Transporter_Comments;
											input.Transporter_Comments = null;
											if(input.Request_Status != "Reject" && input.Request_Status != "Reopen")
											{
												hide Reason_for_Rejection;
											}
											else
											{
												show Reason_for_Rejection;
												disable Reason_for_Rejection;
												show Comments_History;
												disable Comments_History;
											}
											hide Client;
											hide Request_Status;
											hide Task_List;
											hide Tour_BR_Status;
											if(ifnull(input.Actual_Cost,-1.0) == -1.0)
											{
												hide Transporter_Submit;
											}
											show Tour_Visits.Get_Visit_Data;
											disable Bill_Request;
											disable Transporter;
											disable Tour_ID;
											disable Tour_Distance;
											disable Vehicle_Number;
											disable Vehicle_Type;
											disable Planned_Tour_Cost;
											disable Tour_Visits.Visit_ID;
											disable Tour_Visits.Customer_Name;
											disable Tour_Visits.Customer_Address;
											disable Tour_Visits.Customer_Number;
											disable Tour_Visits.Vehicle_Number;
											disable Tour_Visits.Lorry_Receipt_Number;
											if(input.Transporter_Submit == true)
											{
												show Transporter_Submit;
												disable Transporter_Submit;
												disable Actual_Cost;
												disable Actual_Distance;
												disable Invoice_Number;
												disable Invoice_Proof;
												disable Tour_Visits.Lorry_Receipt_Number;
												disable Tour_Visits.Lorry_Receipt_Proof;
												disable Tour_Visits.POD_Number;
												disable Tour_Visits.POD_Proof;
												disable Tour_Visits.Delivery_Date;
											}
										}
										else if(input.Client == clientRec && ifnull(input.Client,0) != 0)
										{
											hide Client;
											hide Task_List;
											hide Tour_Visits.Tour_ID;
											hide Tour_Visits.Get_Visit_Data;
											hide Transporter_Submit;
											hide Reason_for_Rejection;
											hide Tour_BR_Status;
											disable Bill_Request;
											disable Transporter;
											disable Tour_ID;
											disable Tour_Distance;
											disable Vehicle_Number;
											disable Vehicle_Type;
											disable Planned_Tour_Cost;
											disable Actual_Distance;
											disable Actual_Cost;
											disable Invoice_Number;
											disable Invoice_Proof;
											disable Tour_Visits.Visit_ID;
											disable Tour_Visits.Customer_Name;
											disable Tour_Visits.Customer_Address;
											disable Tour_Visits.Customer_Number;
											disable Tour_Visits.Vehicle_Number;
											disable Tour_Visits.Lorry_Receipt_Number;
											disable Tour_Visits.Lorry_Receipt_Proof;
											disable Tour_Visits.POD_Number;
											disable Tour_Visits.POD_Proof;
											disable Tour_Visits.Delivery_Date;
											if(ifnull(input.Transporter_Comments,"") != "")
											{
												show Comments_History;
												show Transporter_Comments;
												disable Comments_History;
												disable Transporter_Comments;
											}
											else if(ifnull(input.Comments_History,"") != "")
											{
												hide Transporter_Comments;
												show Comments_History;
												disable Comments_History;
											}
										}
						)	
						on user input of Actual_Cost
						(
							transRec = Transporter_POC_List[Email_ID == zoho.loginuserid].Transporter_ID;
										if(input.Transporter == transRec && ifnull(input.Transporter,0) != 0)
										{
											if(ifnull(input.Actual_Cost,-10.0) != -10.0)
											{
												show Transporter_Submit;
											}
											else
											{
												hide Transporter_Submit;
												input.Transporter_Submit = false;
											}
										}
						)	
						on success
						(
							transRec = Transporter_POC_List[Email_ID == zoho.loginuserid].Transporter_ID;
										if(input.Transporter == transRec && ifnull(input.Transporter,0) != 0)
										{
											if(input.Transporter_Submit == true && input.Tour_BR_Status == "Open" || input.Tour_BR_Status == "Reopen")
											{
												input.Tour_BR_Status = "Pending Review";
												if(ifnull(input.Tour_BR_Status,"") != "")
												{
													//updating the send email for transporter to client
													scenario = "";
													sender = "";
													toClient = "";
													clientPOC = Client_POC_List[Client == input.Client && Role == "Admin"];
													toClient = clientPOC.Email_ID;
													//update Plan to be visible for Client
													planRec = Plan[ID == input.Bill_Request];
													planRec.Submitted_for_Review=true;
													//check status of other tours in the plan if the tour is approved
													//send email to the transporter if the tour is rejected
													if(input.Tour_BR_Status == "Pending Review")
													{
														//send email to Client stating that a new tour update has been submitted by the transporter
														scenario = "New Tour Updated";
														sender = "Transporter";
														notification = Notification_Setup[Scenario == scenario && Sender_field == sender];
														sendmail
														[
															from :zoho.loginuserid
															to :toClient
															subject :thisapp.Notification.dynamicContent(Tours[ID == input.ID],notification.Subject_field,null,null)
															message :thisapp.Notification.dynamicContent(Tours[ID == input.ID],notification.Body,zoho.loginuserid,toClient)
														]
													}
												}
											}
										}
						)	
						on user input of Request_Status
						(
							clientRec = Client_POC_List[Email_ID == zoho.loginuserid].Client;
										if(input.Client == clientRec && ifnull(input.Client,0) != 0)
										{
											if(ifnull(input.Request_Status,"") != "")
											{
												if(input.Request_Status == "Approve")
												{
													input.Tour_BR_Status = "Approved";
												}
												else if(input.Request_Status == "Reject")
												{
													input.Tour_BR_Status = "Reopen";
													show Reason_for_Rejection;
												}
											}
										}
						)	
						hide add row of Tour_Visits;
						hide delete row of Tour_Visits;
					}
				}
			}
			Hide_Data as "Hide Data"
			{
    			type =  form
				form = Notification_Centre
				on add or edit
				{
					actions 
					{
						hide From,To;
					}
				}
			}
			Client_Access_Scripts as "Client Access Scripts"
			{
    			type =  form
				form = Plan
				on edit
				{
					actions 
					{
						disable Approval_Status,Bill_Request_ID,Date_field,Plan_ID,Status,Team;
						on load
						(
							disable Tours.Transporter;
										disable Tours.Tour_BR_Status;
										disable Tours.Bill_Request;
										disable Tours.Client;
										disable Tours.Invoice_Proof;
										disable Tours.Tour_ID;
										disable Tours.Actual_Distance;
										disable Tours.Actual_Cost;
										//disable Tours.Tour_Visits ;
										disable Tours.Vehicle_Type;
										disable Tours.Tour_Distance;
										disable Tours.Invoice_Number;
										disable Tours.Request_Status;
										disable Tours.Vehicle_Number;
										disable Tours.Planned_Tour_Cost;
										disable Tours.Transporter_Submit;
						)	
					}
				}
			}
			User_Input_Scripts as "User Input Scripts"
			{
    			type =  form
				form = Start_a_New_Billing_Request
				on add
				{
					actions 
					{
						on user input of Date_field
						(
							if(input.Date_field != null && ifnull(input.Team,"") != "")
										{
											batchmap = thisapp.locusAPI.getBatches(Client_Data[ID == input.Client_Data],input.Date_field.toString(),input.Team);
											if(batchmap.get("code") == "0")
											{
												show Order_Set;
												batchList = batchmap.get("msg");
												input.Order_Set:ui.add(batchList);
												input.Dump_Data = batchmap.get("frozenMap");
											}
											else
											{
												if(batchmap.get("code") == "1")
												{
													alert batchmap.get("msg");
												}
												else
												{
													alert "No batches found for the given team";
												}
												input.Date_field = null;
												input.Team = null;
												//openUrl("#Script:page.reresh","same window");
											}
										}
										else if(input.Date_field != null)
										{
											if(input.Date_field > zoho.currentdate)
											{
												alert "Future dates are not allowed.";
												input.Date_field = null;
											}
										}
						)	
						on user input of Team
						(
							if(input.Date_field != null && ifnull(input.Team,"") != "")
										{
											batchmap = thisapp.locusAPI.getBatches(Client_Data[ID == input.Client_Data],input.Date_field.toString(),input.Team);
											if(batchmap.get("code") == "0")
											{
												show Order_Set;
												batchList = batchmap.get("msg");
												input.Order_Set:ui.add(batchList);
												input.Dump_Data = batchmap.get("frozenMap");
												disable Date_field;
												disable Team;
											}
											else
											{
												alert batchmap.get("msg");
												input.Date_field = null;
												input.Team = null;
												//openUrl("#Script:page.reresh","same window");
											}
										}
						)	
					}
				}
			}
			Get_Plan_Details as "Get Plan Details"
			{
    			type =  form
				form = Start_a_New_Billing_Request
				on add
				{
					actions 
					{
						on success
						(
							if(ifnull(input.Order_Set,"") != "")
										{
											dumpMap = input.Dump_Data.toMap();
											//create a Plan record
											planRec = insert into Plan
										[
											Added_User=zoho.loginuser
											Team=input.Team
											Date_field=input.Date_field
											Plan_ID=dumpMap.get(input.Order_Set)
											Bill_Request_ID=thisapp.idGenerator.getID("Billing Request")
											Status="Open"
										];
											planDump = thisapp.locusAPI.getPlan(dumpMap.get(input.Order_Set),input.Order_Set,Client_Data[ID == input.Client_Data],Transporter_Data[ID == input.Transporter]);
											if(planDump.get("code") == "0")
											{
												openUrl(zoho.appuri + "#Report:Pending_Updation","same window");
											}
											else
											{
												//set an alert
											}
										}
										else
										{
											//set an alert
										}
						)	
						on validate
						(
							if(ifnull(input.Order_Set,"") != "")
										{
											dumpMap = input.Dump_Data.toMap();
											selectedPlan = dumpMap.get(input.Order_Set);
											planRec = Plan[Plan_ID == selectedPlan];
											if(planRec.count() > 0)
											{
												alert "A billing request has already been raised for this Route plan.";
												cancel submit;
											}
										}
						)	
					}
				}
			}
			API_Update as "API Update"
			{
    			type =  form
				form = Dump_Form
				on edit
				{
					actions  (planData is not null && API_Triggered == true)
					{
						on success
						(
							if(input.ID != null)
										{
											thisapp.locusAPI.parseVisits(Dump_Form[ID == input.ID]);
											//input.taskList = input.taskList + "updated in dumpRec";
										}
						)	
					}
				}
			}
			Execute_when_Created as "Execute when Created"
			{
    			type =  form
				form = Dump_Form
				on add
				{
					actions 
					{
						on success
						(
							if(ifnull(input.planData,"") != "")
										{
											tourMap = input.planData.toMap();
											batchID = tourMap.get("batchId");
											clientRec = Client_Data[ID == tourMap.get("clientRec")];
											// get the batch from locus to get the visit addresses
											thisapp.locusAPI.getBatch_byId(clientRec,batchID);
										}
						)	
					}
				}
			}
			Clean_Slate_Protocol as "Clean Slate Protocol"
			{
    			type =  form
				form = Plan
				on delete
				{
					actions 
					{
						on validate
						(
							for each  tour in Tours[Bill_Request == input.ID]
										{
											delete from Visits[Tour_ID == tour.ID];
											delete from Tours[ID == tour.ID];
										}
						)	
					}
				}
			}
			test_user as "test user"
			{
    			type =  form
				form = Client_Data
				on add
				{
				}
			}
			test_user_on_edit as "test user on edit"
			{
    			type =  form
				form = Client_Data
				on edit
				{
					actions 
					{
						on load
						(
							// a = Client_POC_List[Email_ID == "sribumblebee@gmail.com"].Client;
										// info a;//"login client =" + a + "   " + "actual client =" + 
										// info input.ID;
						)	
					}
				}
			}
			On_Edit_Scripts as "On Edit Scripts"
			{
    			type =  form
				form = Client_POC_List
				on edit
				{
					actions 
					{
						on load
						(
							//clientRec = Client_POC_List[Email_ID == zoho.loginuserid];
										if(Client_POC_List[Email_ID == zoho.loginuserid].count() > 0)
										{
											hide Client;
											disable Personnel_ID;
											disable Email_ID;
											disable Role;
										}
						)	
					}
				}
			}
		}
		functions
		{
			Transporter_Update_Tour as "Transporter - Update Tour"
			{
    			type =  functions
				form = Tours
				on start
				{
					actions 
					{
						on click
						(
							openUrl("#Form:Tours?recLinkID=" + input.ID + "&viewLinkName=All_Transporter_Tours&zc_NextUrl=#Script:page.parent.refresh","popup window","height=900px,width=900px");
						)	
					}
				}
			}
			Review_Tour as "Review Tour"
			{
    			type =  functions
				form = Tours
				on start
				{
					actions 
					{
						on click
						(
							openUrl("#Form:Tours?recLinkID=" + input.ID + "&viewLinkName=All_Tours&zc_NextUrl=" + zoho.appuri + "#Script:page.parent.refresh","popup window","height=900px,width=900px");
						)	
					}
				}
			}
		}
	}
	share_settings
	{
			"Read"
			{
				name = "Read"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true}
				description = "This profile will have read permission for all components\n"
			}
			"Write"
			{
				name = "Write"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:false}
				description = "This profile will have write permission for all components\n"
				ModulePermissions
				{
					Unauthorised_Access
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Notification_Centre
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Message{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							From{visibility:false,readonly:false}
							To{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Transporter_Data
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							All_Transporters={"View","Edit","Delete"}
							Profile={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							POC_List{visibility:true,readonly:false}
							Transporter_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
							Transporter_Name{visibility:true,readonly:false}
						}
					}
					Client_Data
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							Client_Profile={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Modified_User{visibility:false}
							Client_Name{visibility:false,readonly:false}
							Modified_Time{visibility:false}
							POC_List{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Personnel_ID{visibility:false,readonly:false}
							Added_User{visibility:false}
							Teams{visibility:false,readonly:false}
							Authtoken{visibility:false,readonly:false}
							ID{visibility:false}
							Client_ID{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Notification_Setup
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Subject_field{visibility:false,readonly:false}
							Sender_field{visibility:false,readonly:false}
							plain{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Section{visibility:false,readonly:false}
							Body{visibility:false,readonly:false}
							Added_Time{visibility:false}
							Scenario{visibility:false,readonly:false}
						}
					}
					Tours
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							All_Transporter_Tours={"View","Edit","Delete"}
							Pending_Updation={"View","Edit","Delete"}
							All_Tours={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Transporter_Submit{visibility:true,readonly:false}
							Planned_Tour_Cost{visibility:true,readonly:false}
							Vehicle_Number{visibility:true,readonly:false}
							Invoice_Number{visibility:true,readonly:false}
							Tour_Distance{visibility:true,readonly:false}
							Vehicle_Type{visibility:true,readonly:false}
							Request_Status{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Task_List{visibility:true,readonly:false}
							Tour_Visits{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
							Transporter_Comments{visibility:true,readonly:false}
							Actual_Cost{visibility:true,readonly:false}
							Comments_History{visibility:true,readonly:false}
							Tour_ID{visibility:true,readonly:false}
							Actual_Distance{visibility:true,readonly:false}
							Invoice_Proof{visibility:true,readonly:false}
							Bill_Request{visibility:true,readonly:false}
							Tour_BR_Status{visibility:true,readonly:false}
							Client{visibility:true,readonly:false}
							Transporter{visibility:true,readonly:false}
							Reason_for_Rejection{visibility:true,readonly:false}
						}
					}
					Review_Billing_Request
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							Review_Billing_Request_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Date_field{visibility:true,readonly:false}
							Triggered_By{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Plan
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							All_Plans={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Date_field{visibility:true,readonly:false}
							Submitted_for_Review{visibility:true,readonly:false}
							Tours{visibility:true,readonly:false}
							Plan_ID{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Bill_Request_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Approval_Status{visibility:true,readonly:false}
						}
					}
					Client_POC_List
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							All_POCs={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Role{visibility:true,readonly:false}
							Email_ID{visibility:true,readonly:false}
							Client{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
							Associated_Teams{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Transporter_POC_List
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							Client_Transporter_POCs={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Transporter_ID{visibility:true,readonly:false}
							Email_ID{visibility:true,readonly:false}
							Transporter_Personnel{visibility:true,readonly:false}
							Accessible_Teams{visibility:true,readonly:false}
							Permissions{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Visits
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							All_Visits={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Modified_User{visibility:false}
							Visit_ID{visibility:false,readonly:false}
							Modified_Time{visibility:false}
							Customer_Name{visibility:false,readonly:false}
							Delivery_Date{visibility:false,readonly:false}
							Vehicle_Number{visibility:false,readonly:false}
							POD_Proof{visibility:false,readonly:false}
							Lorry_Receipt_Number{visibility:false,readonly:false}
							POD_Number{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Customer_Number{visibility:false,readonly:false}
							Get_Visit_Data{visibility:false,readonly:false}
							Added_User{visibility:false}
							Lorry_Receipt_Proof{visibility:false,readonly:false}
							Tour_ID{visibility:false,readonly:false}
							ID{visibility:false}
							Customer_Address{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Dump_Form
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							API_Triggered{visibility:false,readonly:false}
							plain{visibility:false,readonly:false}
							Added_User{visibility:false}
							taskList{visibility:false,readonly:false}
							planData{visibility:false,readonly:false}
							ID{visibility:false}
							Section{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Teams
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							All_Teams={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Team_Name{visibility:true,readonly:false}
							Team_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
						}
					}
					Start_a_New_Billing_Request
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							Start_a_New_Billing_Request_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Date_field{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Dump_Data{visibility:true,readonly:false}
							Transporter{visibility:true,readonly:false}
							Order_Set{visibility:true,readonly:false}
							Started_By{visibility:true,readonly:false}
						}
					}
					ID_Generator
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							All_ID_Generators={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							BR_Next_ID{visibility:true,readonly:false}
							TR_Next_ID{visibility:true,readonly:false}
							Creator_Authtoken{visibility:true,readonly:false}
							Billing_Request_Note{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							TR_Prefix{visibility:true,readonly:false}
							BR_Prefix{visibility:true,readonly:false}
						}
					}
					Alert
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Added_User_IP_Address{visibility:false}
							Modified_Time{visibility:false}
							Team_Removal{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Section{visibility:false,readonly:false}
							Added_Time{visibility:false}
							Modified_User_IP_Address{visibility:false}
							Condition_field{visibility:false,readonly:false}
						}
					}
				}
			}
			"Client Admin"
			{
				name = "Client Admin"
				type = Customer_Portal
				permissions = {Chat:false, Predefined:false}
				description = "Client Admin Profile\n"
				ModulePermissions
				{
					Unauthorised_Access
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Notification_Centre
					{
						FieldPermissions
						{
							From{visibility:true,readonly:false}
							To{visibility:true,readonly:false}
							Message{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Transporter_Data
					{
						enabled= Create,Viewall,Tab 
						ReportPermissions
						{
							All_Client_Transporters={"View","Edit"}
						}
						FieldPermissions
						{
							POC_List{visibility:true,readonly:false}
							Transporter_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
							Transporter_Name{visibility:true,readonly:false}
						}
					}
					Client_Data
					{
						enabled= Create,Viewall,Tab 
						ReportPermissions
						{
							Client_Profile={"View"}
						}
						FieldPermissions
						{
							Client_Name{visibility:true,readonly:false}
							POC_List{visibility:true,readonly:false}
							Teams{visibility:true,readonly:false}
							Authtoken{visibility:true,readonly:false}
							Client_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
						}
					}
					Notification_Setup
					{
						FieldPermissions
						{
							Subject_field{visibility:true,readonly:false}
							Sender_field{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Body{visibility:true,readonly:false}
							Scenario{visibility:true,readonly:false}
						}
					}
					Tours
					{
						enabled= Create,Viewall,Modifyall,Tab 
						ReportPermissions
						{
							Tours_Reopened={"View"}
							Tours_Approved={"View"}
							All_Tours={"View","Edit"}
							Pending_Verification={"View"}
						}
						FieldPermissions
						{
							Transporter_Submit{visibility:true,readonly:false}
							Planned_Tour_Cost{visibility:true,readonly:false}
							Vehicle_Number{visibility:true,readonly:false}
							Invoice_Number{visibility:true,readonly:false}
							Tour_Distance{visibility:true,readonly:false}
							Vehicle_Type{visibility:true,readonly:false}
							Request_Status{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Task_List{visibility:true,readonly:false}
							Tour_Visits{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
							Transporter_Comments{visibility:true,readonly:false}
							Actual_Cost{visibility:true,readonly:false}
							Comments_History{visibility:true,readonly:false}
							Tour_ID{visibility:true,readonly:false}
							Actual_Distance{visibility:true,readonly:false}
							Invoice_Proof{visibility:true,readonly:false}
							Bill_Request{visibility:true,readonly:false}
							Tour_BR_Status{visibility:true,readonly:false}
							Client{visibility:true,readonly:false}
							Transporter{visibility:true,readonly:false}
							Reason_for_Rejection{visibility:true,readonly:false}
						}
					}
					Review_Billing_Request
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Review_Billing_Request_Report={"View"}
						}
						FieldPermissions
						{
							Date_field{visibility:true,readonly:false}
							Triggered_By{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Plan
					{
						enabled= Create,Viewall,Export,Tab 
						ReportPermissions
						{
							All_Plans={"View"}
							Closed_Billing_Requests={"View"}
							Open_Billing_Requests={"View"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Date_field{visibility:true,readonly:false}
							Submitted_for_Review{visibility:true,readonly:false}
							Tours{visibility:true,readonly:false}
							Plan_ID{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Bill_Request_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Approval_Status{visibility:true,readonly:false}
						}
					}
					Client_POC_List
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							All_Client_POCs={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Role{visibility:true,readonly:false}
							Email_ID{visibility:true,readonly:false}
							Client{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
							Associated_Teams{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Transporter_POC_List
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						ReportPermissions
						{
							Client_Transporter_POCs={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Transporter_ID{visibility:true,readonly:false}
							Email_ID{visibility:true,readonly:false}
							Transporter_Personnel{visibility:true,readonly:false}
							Accessible_Teams{visibility:true,readonly:false}
							Permissions{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Visits
					{
						enabled= Viewall 
						ReportPermissions
						{
							All_Visits1={"View"}
						}
						FieldPermissions
						{
							Visit_ID{visibility:true,readonly:false}
							Customer_Name{visibility:true,readonly:false}
							Delivery_Date{visibility:true,readonly:false}
							Vehicle_Number{visibility:true,readonly:false}
							POD_Proof{visibility:true,readonly:false}
							Lorry_Receipt_Number{visibility:true,readonly:false}
							POD_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Customer_Number{visibility:true,readonly:false}
							Get_Visit_Data{visibility:true,readonly:false}
							Lorry_Receipt_Proof{visibility:true,readonly:false}
							Tour_ID{visibility:true,readonly:false}
							Customer_Address{visibility:true,readonly:false}
						}
					}
					Dump_Form
					{
						FieldPermissions
						{
							taskList{visibility:true,readonly:false}
							planData{visibility:true,readonly:false}
							API_Triggered{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Teams
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Team_Name{visibility:true,readonly:false}
							Team_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
						}
					}
					Start_a_New_Billing_Request
					{
						FieldPermissions
						{
							Date_field{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Dump_Data{visibility:true,readonly:false}
							Transporter{visibility:true,readonly:false}
							Order_Set{visibility:true,readonly:false}
							Started_By{visibility:true,readonly:false}
						}
					}
					ID_Generator
					{
						FieldPermissions
						{
							BR_Next_ID{visibility:true,readonly:false}
							TR_Next_ID{visibility:true,readonly:false}
							Creator_Authtoken{visibility:true,readonly:false}
							Billing_Request_Note{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							TR_Prefix{visibility:true,readonly:false}
							BR_Prefix{visibility:true,readonly:false}
						}
					}
					Alert
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Added_User_IP_Address{visibility:false}
							Modified_Time{visibility:false}
							Team_Removal{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Section{visibility:false,readonly:false}
							Added_Time{visibility:false}
							Modified_User_IP_Address{visibility:false}
							Condition_field{visibility:false,readonly:false}
						}
					}
				}
			}
			"Administrator"
			{
				name = "Administrator"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true}
				description = "This profile will have all the permissions.\n"
			}
			"Client Personnel"
			{
				name = "Client Personnel"
				type = Customer_Portal
				permissions = {Chat:false, Predefined:false}
				description = "Client Personnel Profile\n"
				ModulePermissions
				{
					Unauthorised_Access
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Notification_Centre
					{
						FieldPermissions
						{
							From{visibility:true,readonly:false}
							To{visibility:true,readonly:false}
							Message{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Transporter_Data
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							All_Client_Transporters={"View"}
						}
						FieldPermissions
						{
							POC_List{visibility:true,readonly:false}
							Transporter_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
							Transporter_Name{visibility:true,readonly:false}
						}
					}
					Client_Data
					{
						FieldPermissions
						{
							Client_Name{visibility:true,readonly:false}
							POC_List{visibility:true,readonly:false}
							Teams{visibility:true,readonly:false}
							Authtoken{visibility:true,readonly:false}
							Client_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
						}
					}
					Notification_Setup
					{
						FieldPermissions
						{
							Subject_field{visibility:true,readonly:false}
							Sender_field{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Body{visibility:true,readonly:false}
							Scenario{visibility:true,readonly:false}
						}
					}
					Tours
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Tours_Reopened={"View"}
							Tours_Approved={"View"}
							All_Tours={"View","Edit"}
							Pending_Verification={"View"}
						}
						FieldPermissions
						{
							Transporter_Submit{visibility:true,readonly:false}
							Planned_Tour_Cost{visibility:true,readonly:false}
							Vehicle_Number{visibility:true,readonly:false}
							Invoice_Number{visibility:true,readonly:false}
							Tour_Distance{visibility:true,readonly:false}
							Vehicle_Type{visibility:true,readonly:false}
							Request_Status{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Task_List{visibility:true,readonly:false}
							Tour_Visits{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
							Transporter_Comments{visibility:true,readonly:false}
							Actual_Cost{visibility:true,readonly:false}
							Comments_History{visibility:true,readonly:false}
							Tour_ID{visibility:true,readonly:false}
							Actual_Distance{visibility:true,readonly:false}
							Invoice_Proof{visibility:true,readonly:false}
							Bill_Request{visibility:true,readonly:false}
							Tour_BR_Status{visibility:true,readonly:false}
							Client{visibility:true,readonly:false}
							Transporter{visibility:true,readonly:false}
							Reason_for_Rejection{visibility:true,readonly:false}
						}
					}
					Review_Billing_Request
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Review_Billing_Request_Report={"View"}
						}
						FieldPermissions
						{
							Date_field{visibility:true,readonly:false}
							Triggered_By{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Plan
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Billing_Requests_Locus={"View"}
							All_Plans={"View"}
							Closed_Billing_Requests={"View"}
							Open_Billing_Requests={"View"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Date_field{visibility:true,readonly:false}
							Submitted_for_Review{visibility:true,readonly:false}
							Tours{visibility:true,readonly:false}
							Plan_ID{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Bill_Request_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Approval_Status{visibility:true,readonly:false}
						}
					}
					Client_POC_List
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Role{visibility:true,readonly:false}
							Email_ID{visibility:true,readonly:false}
							Client{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
							Associated_Teams{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Transporter_POC_List
					{
						enabled= Create,Export,Tab 
						ReportPermissions
						{
							Client_Transporter_POCs={"View"}
						}
						FieldPermissions
						{
							Transporter_ID{visibility:true,readonly:false}
							Email_ID{visibility:true,readonly:false}
							Transporter_Personnel{visibility:true,readonly:false}
							Accessible_Teams{visibility:true,readonly:false}
							Permissions{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Visits
					{
						enabled= Viewall 
						ReportPermissions
						{
							All_Visits1={"View"}
						}
						FieldPermissions
						{
							Visit_ID{visibility:true,readonly:false}
							Customer_Name{visibility:true,readonly:false}
							Delivery_Date{visibility:true,readonly:false}
							Vehicle_Number{visibility:true,readonly:false}
							POD_Proof{visibility:true,readonly:false}
							Lorry_Receipt_Number{visibility:true,readonly:false}
							POD_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Customer_Number{visibility:true,readonly:false}
							Get_Visit_Data{visibility:true,readonly:false}
							Lorry_Receipt_Proof{visibility:true,readonly:false}
							Tour_ID{visibility:true,readonly:false}
							Customer_Address{visibility:true,readonly:false}
						}
					}
					Dump_Form
					{
						FieldPermissions
						{
							taskList{visibility:true,readonly:false}
							planData{visibility:true,readonly:false}
							API_Triggered{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Teams
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							All_Teams={"View"}
						}
						FieldPermissions
						{
							Team_Name{visibility:true,readonly:false}
							Team_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
						}
					}
					Start_a_New_Billing_Request
					{
						FieldPermissions
						{
							Date_field{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Dump_Data{visibility:true,readonly:false}
							Transporter{visibility:true,readonly:false}
							Order_Set{visibility:true,readonly:false}
							Started_By{visibility:true,readonly:false}
						}
					}
					ID_Generator
					{
						FieldPermissions
						{
							BR_Next_ID{visibility:true,readonly:false}
							TR_Next_ID{visibility:true,readonly:false}
							Creator_Authtoken{visibility:true,readonly:false}
							Billing_Request_Note{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							TR_Prefix{visibility:true,readonly:false}
							BR_Prefix{visibility:true,readonly:false}
						}
					}
					Alert
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Added_User_IP_Address{visibility:false}
							Modified_Time{visibility:false}
							Team_Removal{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Section{visibility:false,readonly:false}
							Added_Time{visibility:false}
							Modified_User_IP_Address{visibility:false}
							Condition_field{visibility:false,readonly:false}
						}
					}
				}
			}
			"Customer"
			{
				name = "Customer"
				type = Customer_Portal
				permissions = {Chat:false, Predefined:true}
				description = "This is the default profile having only add and view permission.\n"
			}
			"Transporter Personnel"
			{
				name = "Transporter Personnel"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "Transporter Personnel Profile\n"
				ModulePermissions
				{
					Unauthorised_Access
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Notification_Centre
					{
						FieldPermissions
						{
							From{visibility:true,readonly:false}
							To{visibility:true,readonly:false}
							Message{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Transporter_Data
					{
						enabled= Create,Export,Tab 
						ReportPermissions
						{
							Profile={"View","Edit"}
						}
						FieldPermissions
						{
							POC_List{visibility:true,readonly:false}
							Transporter_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
							Transporter_Name{visibility:true,readonly:false}
						}
					}
					Client_Data
					{
						FieldPermissions
						{
							Client_Name{visibility:true,readonly:false}
							POC_List{visibility:true,readonly:false}
							Teams{visibility:true,readonly:false}
							Authtoken{visibility:true,readonly:false}
							Client_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
						}
					}
					Notification_Setup
					{
						FieldPermissions
						{
							Subject_field{visibility:true,readonly:false}
							Sender_field{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Body{visibility:true,readonly:false}
							Scenario{visibility:true,readonly:false}
						}
					}
					Tours
					{
						enabled= Create,Export,Tab 
						ReportPermissions
						{
							All_Transporter_Tours={"View","Edit"}
							Pending_Updation={"View"}
							Tours_Approved1={"View"}
							Tours_Re_Opened={"View"}
						}
						FieldPermissions
						{
							Transporter_Submit{visibility:true,readonly:false}
							Planned_Tour_Cost{visibility:true,readonly:false}
							Vehicle_Number{visibility:true,readonly:false}
							Invoice_Number{visibility:true,readonly:false}
							Tour_Distance{visibility:true,readonly:false}
							Vehicle_Type{visibility:true,readonly:false}
							Request_Status{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Task_List{visibility:true,readonly:false}
							Tour_Visits{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
							Transporter_Comments{visibility:true,readonly:false}
							Actual_Cost{visibility:true,readonly:false}
							Comments_History{visibility:true,readonly:false}
							Tour_ID{visibility:true,readonly:false}
							Actual_Distance{visibility:true,readonly:false}
							Invoice_Proof{visibility:true,readonly:false}
							Bill_Request{visibility:true,readonly:false}
							Tour_BR_Status{visibility:true,readonly:false}
							Client{visibility:true,readonly:false}
							Transporter{visibility:true,readonly:false}
							Reason_for_Rejection{visibility:true,readonly:false}
						}
					}
					Review_Billing_Request
					{
						FieldPermissions
						{
							Date_field{visibility:true,readonly:false}
							Triggered_By{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Plan
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Date_field{visibility:true,readonly:false}
							Submitted_for_Review{visibility:true,readonly:false}
							Tours{visibility:true,readonly:false}
							Plan_ID{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Bill_Request_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Approval_Status{visibility:true,readonly:false}
						}
					}
					Client_POC_List
					{
						FieldPermissions
						{
							Role{visibility:true,readonly:false}
							Email_ID{visibility:true,readonly:false}
							Client{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
							Associated_Teams{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Transporter_POC_List
					{
						enabled= Create,Import,Export,Tab 
						ReportPermissions
						{
							Peers_T_POC={"View","Edit"}
						}
						FieldPermissions
						{
							Transporter_ID{visibility:true,readonly:false}
							Email_ID{visibility:true,readonly:false}
							Transporter_Personnel{visibility:true,readonly:false}
							Accessible_Teams{visibility:true,readonly:false}
							Permissions{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Visits
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Visit_ID{visibility:true,readonly:false}
							Customer_Name{visibility:true,readonly:false}
							Delivery_Date{visibility:true,readonly:false}
							Vehicle_Number{visibility:true,readonly:false}
							POD_Proof{visibility:true,readonly:false}
							Lorry_Receipt_Number{visibility:true,readonly:false}
							POD_Number{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Customer_Number{visibility:true,readonly:false}
							Get_Visit_Data{visibility:true,readonly:false}
							Lorry_Receipt_Proof{visibility:true,readonly:false}
							Tour_ID{visibility:true,readonly:false}
							Customer_Address{visibility:true,readonly:false}
						}
					}
					Dump_Form
					{
						FieldPermissions
						{
							taskList{visibility:true,readonly:false}
							planData{visibility:true,readonly:false}
							API_Triggered{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Teams
					{
						FieldPermissions
						{
							Team_Name{visibility:true,readonly:false}
							Team_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
						}
					}
					Start_a_New_Billing_Request
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Start_a_New_Billing_Request_Report={"View","Edit"}
						}
						FieldPermissions
						{
							Date_field{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Dump_Data{visibility:true,readonly:false}
							Transporter{visibility:true,readonly:false}
							Order_Set{visibility:true,readonly:false}
							Started_By{visibility:true,readonly:false}
						}
					}
					ID_Generator
					{
						FieldPermissions
						{
							BR_Next_ID{visibility:true,readonly:false}
							TR_Next_ID{visibility:true,readonly:false}
							Creator_Authtoken{visibility:true,readonly:false}
							Billing_Request_Note{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							TR_Prefix{visibility:true,readonly:false}
							BR_Prefix{visibility:true,readonly:false}
						}
					}
					Alert
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Added_User_IP_Address{visibility:false}
							Modified_Time{visibility:false}
							Team_Removal{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Section{visibility:false,readonly:false}
							Added_Time{visibility:false}
							Modified_User_IP_Address{visibility:false}
							Condition_field{visibility:false,readonly:false}
						}
					}
				}
			}
			"Locus Personnel"
			{
				name = "Locus Personnel"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "Locus Personnel Profile\n"
				ModulePermissions
				{
					Unauthorised_Access
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Notification_Centre
					{
						FieldPermissions
						{
							From{visibility:true,readonly:false}
							To{visibility:true,readonly:false}
							Message{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Transporter_Data
					{
						enabled= Create,Export,Tab 
						ReportPermissions
						{
							All_Transporters={"View","Edit"}
						}
						FieldPermissions
						{
							POC_List{visibility:true,readonly:false}
							Transporter_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
							Transporter_Name{visibility:true,readonly:false}
						}
					}
					Client_Data
					{
						enabled= Create,Export,Tab 
						ReportPermissions
						{
							All_Clients={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Client_Name{visibility:true,readonly:false}
							POC_List{visibility:true,readonly:false}
							Teams{visibility:true,readonly:false}
							Authtoken{visibility:true,readonly:false}
							Client_ID{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
						}
					}
					Notification_Setup
					{
						FieldPermissions
						{
							Subject_field{visibility:true,readonly:false}
							Sender_field{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Body{visibility:true,readonly:false}
							Scenario{visibility:true,readonly:false}
						}
					}
					Tours
					{
						enabled= Create,Export,Tab 
						ReportPermissions
						{
							Tours_Locus={"View","Edit"}
						}
						FieldPermissions
						{
							Transporter_Submit{visibility:true,readonly:false}
							Planned_Tour_Cost{visibility:true,readonly:false}
							Vehicle_Number{visibility:true,readonly:false}
							Invoice_Number{visibility:true,readonly:false}
							Tour_Distance{visibility:true,readonly:false}
							Vehicle_Type{visibility:true,readonly:false}
							Request_Status{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Task_List{visibility:true,readonly:false}
							Tour_Visits{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
							Transporter_Comments{visibility:true,readonly:false}
							Actual_Cost{visibility:true,readonly:false}
							Comments_History{visibility:true,readonly:false}
							Tour_ID{visibility:true,readonly:false}
							Actual_Distance{visibility:true,readonly:false}
							Invoice_Proof{visibility:true,readonly:false}
							Bill_Request{visibility:true,readonly:false}
							Tour_BR_Status{visibility:true,readonly:false}
							Client{visibility:true,readonly:false}
							Transporter{visibility:true,readonly:false}
							Reason_for_Rejection{visibility:true,readonly:false}
						}
					}
					Review_Billing_Request
					{
						FieldPermissions
						{
							Date_field{visibility:true,readonly:false}
							Triggered_By{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Plan
					{
						enabled= Create,Export,Tab 
						ReportPermissions
						{
							Billing_Requests_Locus={"View","Edit"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Date_field{visibility:true,readonly:false}
							Submitted_for_Review{visibility:true,readonly:false}
							Tours{visibility:true,readonly:false}
							Plan_ID{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Bill_Request_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Approval_Status{visibility:true,readonly:false}
						}
					}
					Client_POC_List
					{
						enabled= Create,Import,Export,Tab 
						ReportPermissions
						{
							All_POCs={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Role{visibility:true,readonly:false}
							Email_ID{visibility:true,readonly:false}
							Client{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
							Associated_Teams{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Transporter_POC_List
					{
						enabled= Create,Export,Tab 
						ReportPermissions
						{
							All_Transporter_POCs={"View","Edit"}
						}
						FieldPermissions
						{
							Transporter_ID{visibility:true,readonly:false}
							Email_ID{visibility:true,readonly:false}
							Transporter_Personnel{visibility:true,readonly:false}
							Accessible_Teams{visibility:true,readonly:false}
							Permissions{visibility:true,readonly:false}
							Personnel_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Visits
					{
						enabled= Create,Export,Tab 
						ReportPermissions
						{
							All_Visits={"View","Edit"}
						}
						FieldPermissions
						{
							Visit_ID{visibility:true,readonly:false}
							Customer_Name{visibility:true,readonly:false}
							Delivery_Date{visibility:true,readonly:false}
							Vehicle_Number{visibility:true,readonly:false}
							POD_Proof{visibility:true,readonly:false}
							Lorry_Receipt_Number{visibility:true,readonly:false}
							POD_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Customer_Number{visibility:true,readonly:false}
							Get_Visit_Data{visibility:true,readonly:false}
							Lorry_Receipt_Proof{visibility:true,readonly:false}
							Tour_ID{visibility:true,readonly:false}
							Customer_Address{visibility:true,readonly:false}
						}
					}
					Dump_Form
					{
						FieldPermissions
						{
							taskList{visibility:true,readonly:false}
							planData{visibility:true,readonly:false}
							API_Triggered{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Teams
					{
						FieldPermissions
						{
							Team_Name{visibility:true,readonly:false}
							Team_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
						}
					}
					Start_a_New_Billing_Request
					{
						FieldPermissions
						{
							Date_field{visibility:true,readonly:false}
							Client_Data{visibility:true,readonly:false}
							Team{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Dump_Data{visibility:true,readonly:false}
							Transporter{visibility:true,readonly:false}
							Order_Set{visibility:true,readonly:false}
							Started_By{visibility:true,readonly:false}
						}
					}
					ID_Generator
					{
						FieldPermissions
						{
							BR_Next_ID{visibility:true,readonly:false}
							TR_Next_ID{visibility:true,readonly:false}
							Creator_Authtoken{visibility:true,readonly:false}
							Billing_Request_Note{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							TR_Prefix{visibility:true,readonly:false}
							BR_Prefix{visibility:true,readonly:false}
						}
					}
					Alert
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Added_User_IP_Address{visibility:false}
							Modified_Time{visibility:false}
							Team_Removal{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Section{visibility:false,readonly:false}
							Added_Time{visibility:false}
							Modified_User_IP_Address{visibility:false}
							Condition_field{visibility:false,readonly:false}
						}
					}
				}
			}
			roles
			{
				"CEO"
				{
					description = "User belonging to this role can access data of all other users.\n"
				}
			}
	}
	customize
	{
		
		layout = "tab"
		color = "black"
		base theme = "professional"
		new theme = 1
		new theme color = 3
		icons =true
		icons style = outline
	}




	


}

